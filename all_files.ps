%!PS-Adobe-3.0
%%BoundingBox: 18 36 577 806
%%Title: Enscript Output
%%Creator: GNU Enscript 1.6.5.90
%%CreationDate: Sat Jan 25 10:43:01 2025
%%Orientation: Portrait
%%Pages: (atend)
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6.5 90
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6.5 90
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 10 10 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [595 842] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-simple 1.6.5 90

/do_header {	% print default simple header
  gsave
    d_header_x d_header_y HFpt_h 3 div add translate

    HF setfont
    user_header_p {
      5 0 moveto user_header_left_str show

      d_header_w user_header_center_str stringwidth pop sub 2 div
      0 moveto user_header_center_str show

      d_header_w user_header_right_str stringwidth pop sub 5 sub
      0 moveto user_header_right_str show
    } {
      5 0 moveto fname show
      45 0 rmoveto fmodstr show
      45 0 rmoveto pagenumstr show
    } ifelse

  grestore
} def
%%EndResource
/d_page_w 559 def
/d_page_h 770 def
/d_header_x 0 def
/d_header_y 755 def
/d_header_w 559 def
/d_header_h 15 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 559 def
/d_footer_h 0 def
/d_output_w 559 def
/d_output_h 755 def
/cols 1 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (add_new_descriptor.cpp) def
/fdir (.) def
/ftail (add_new_descriptor.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:41 2025) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(#include "add_new_descriptor.hpp") s
5 731 M
(#include "ui_add_new_descriptor.h") s
5 720 M
(#include <QFileDialog>) s
5 709 M
(#include "descriptor.hpp") s
5 698 M
(#include <QFile>) s
5 687 M
(#include <QJsonDocument>) s
5 676 M
(#include <QJsonObject>) s
5 665 M
(#include <QJsonArray>) s
5 654 M
(#include <QDebug>) s
5 643 M
(#include <QMessageBox>) s
5 632 M
(#include <QFile>) s
5 621 M
(#include <QIODevice>) s
5 588 M
(Add_New_Descriptor::Add_New_Descriptor\(QString Librarypath, QWidget *parent\)) s
5 577 M
(    : QDialog\(parent\)) s
5 566 M
(    , ui\(new Ui::Add_New_Descriptor\)) s
5 555 M
({) s
5 544 M
(    ui->setupUi\(this\);) s
5 533 M
(    ui->Image_path_hidden->setVisible\(false\);) s
5 522 M
(    qDebug\(\) << "Add_New_Descriptor constructor called";) s
5 511 M
(    qDebug\(\) << "Library path: " << Librarypath;) s
5 489 M
(    setLibraryPath\(Librarypath\);) s
5 467 M
(    // Ensure no duplicate connections) s
5 456 M
(    disconnect\(ui->loadImageButton, nullptr, nullptr, nullptr\);) s
5 445 M
(    disconnect\(ui->save_the_descriptor, nullptr, nullptr, nullptr\);) s
5 423 M
(    // Connect signals to slots) s
5 412 M
(    connect\(ui->loadImageButton, &QPushButton::clicked, this, &Add_New_Descriptor::on_loadI) s
5 401 M
(mageButton_clicked\);) s
5 390 M
(    connect\(ui->save_the_descriptor, &QPushButton::clicked, this, &Add_New_Descriptor::on_s) s
5 379 M
(ave_the_descriptor_clicked\);) s
5 357 M
(    // Apply styles to the UI elements) s
5 346 M
(    ui->loadImageButton->setStyleSheet\("background-color: #99c1f1; color: white; padding: 1) s
5 335 M
(0px 20px; border: none; border-radius: 5px;"\);) s
5 324 M
(    ui->save_the_descriptor->setStyleSheet\("background-color: #99c1f1; color: white; paddin) s
5 313 M
(g: 10px 20px; border: none; border-radius: 5px;"\);) s
5 302 M
(    ui->add_title->setStyleSheet\("padding: 10px; border: 1px solid #ccc; border-radius: 5px) s
5 291 M
(;"\);) s
5 280 M
(    ui->add_source->setStyleSheet\("padding: 10px; border: 1px solid #ccc; border-radius: 5p) s
5 269 M
(x;"\);) s
5 258 M
(    ) s
5 247 M
(    ui->add_cost->setStyleSheet\("padding: 10px; border: 1px solid #ccc; border-radius: 5px;) s
5 236 M
("\);) s
5 225 M
(    ui->add_cost->setPlaceholderText\("Enter the cost"\);) s
5 214 M
(    ui->add_title->setPlaceholderText\("Enter the title"\);) s
5 203 M
(    ui->add_source->setPlaceholderText\("Enter the source"\);) s
5 192 M
(    ) s
5 181 M
(    // ui->ImageLabel->setStyleSheet\("border: 1px solid #ccc; padding: 5px; background-imag) s
5 170 M
(e: url\(Images/galerie.jpg\); background-repeat: no-repeat; background-position: center;"\);) s
5 148 M
(    ui->ImageLabel->show\(\); ) s
5 137 M
(    ui->comboBox_Access->addItem\("L"\);) s
5 126 M
(    ui->comboBox_Access->addItem\("O"\);) s
5 115 M
(}) s
5 93 M
(Add_New_Descriptor::~Add_New_Descriptor\(\)) s
5 82 M
({) s
5 71 M
(    delete ui;) s
5 60 M
(}) s
5 38 M
(void Add_New_Descriptor::on_loadImageButton_clicked\(\)) s
5 27 M
({) s
5 16 M
(    static bool isProcessing = false;) s
5 5 M
(    if \(isProcessing\) {) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (add_new_descriptor.cpp) def
/fdir (.) def
/ftail (add_new_descriptor.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:41 2025) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        qDebug\(\) << "on_loadImageButton_clicked: Already processing!";) s
5 731 M
(        return; // Prevent re-entry if already processing) s
5 720 M
(    }) s
5 709 M
(    isProcessing = true;) s
5 687 M
(    qDebug\(\) << "on_loadImageButton_clicked: Dialog opened";) s
5 676 M
(    QString imagePath = QFileDialog::getOpenFileName\(this, "Open Image", "", "Image Files \() s
5 665 M
(*.png *.jpg *.bmp\)"\);) s
5 643 M
(    if \(!imagePath.isEmpty\(\)\) {) s
5 632 M
(        QPixmap pixmap\(imagePath\);) s
5 621 M
(        ui->Image_path_hidden->setText\(imagePath\);) s
5 610 M
(        qDebug\(\) << "Selected imagePath: " << imagePath;) s
5 599 M
(        ui->ImageLabel->setPixmap\(pixmap.scaled\(210, 210, Qt::KeepAspectRatio\)\);) s
5 588 M
(    } else {) s
5 577 M
(        qDebug\(\) << "on_loadImageButton_clicked: No file selected";) s
5 566 M
(    }) s
5 544 M
(    isProcessing = false; // Reset the flag) s
5 533 M
(}) s
5 511 M
(void Add_New_Descriptor::on_save_the_descriptor_clicked\(\)) s
5 500 M
({) s
5 489 M
(    static bool isProcessing = false;) s
5 478 M
(    if \(isProcessing\) {) s
5 467 M
(        qDebug\(\) << "on_save_the_descriptor_clicked: Already processing!";) s
5 456 M
(        return; // Prevent re-entry if already processing) s
5 445 M
(    }) s
5 434 M
(    isProcessing = true;) s
5 412 M
(    // Gather data from UI) s
5 401 M
(    QString title = ui->add_title->text\(\);) s
5 390 M
(    QString source = ui->add_source->text\(\);) s
5 379 M
(    QString cost = ui->add_cost->text\(\);) s
5 368 M
(    QString imagePath = ui->Image_path_hidden->text\(\);) s
5 357 M
(    char access = ui->comboBox_Access->currentText\(\).toStdString\(\).c_str\(\)[0];) s
5 335 M
(    qDebug\(\) << "on_save_the_descriptor_clicked: Gathering data from UI";) s
5 324 M
(    qDebug\(\) << "Access: " << access;) s
5 313 M
(    qDebug\(\) << "Image path: " << imagePath;) s
5 291 M
(    // Verify if the image path is valid) s
5 280 M
(    if \(imagePath.isEmpty\(\)\) {) s
5 269 M
(        QMessageBox::warning\(this, "Input Error", "Please load an image before saving."\);) s
5 258 M
(        isProcessing = false;) s
5 247 M
(        return;) s
5 236 M
(    }) s
5 214 M
(    QString appPath = QCoreApplication::applicationDirPath\(\);) s
5 203 M
(    QString destinationDir = appPath + "/Images/";) s
5 192 M
(    // QString destinationPath = destinationDir + QFileInfo\(imagePath\).fileName\(\);) s
5 170 M
(    // Ensure the destination directory exists) s
5 159 M
(    QDir dir\(destinationDir\);) s
5 148 M
(    if \(!dir.exists\(\)\) {) s
5 137 M
(        if \(!dir.mkpath\("."\)\) {) s
5 126 M
(            QMessageBox::warning\(this, "Directory Error", "Could not create destination dir) s
5 115 M
(ectory."\);) s
5 104 M
(            isProcessing = false;) s
5 93 M
(            return;) s
5 82 M
(        }) s
5 71 M
(    }) s
5 49 M
(    QString fileName = QFileInfo\(imagePath\).fileName\(\);) s
5 38 M
(    QString uniqueFileName = fileName;) s
5 27 M
(    int counter = 2;) s
5 5 M
(    while \(QFile::exists\(destinationDir + uniqueFileName\)\) {) s
_R
S
%%Page: (3) 3
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (add_new_descriptor.cpp) def
/fdir (.) def
/ftail (add_new_descriptor.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:41 2025) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        uniqueFileName = QFileInfo\(fileName\).completeBaseName\(\) + "_" + QString::number\(cou) s
5 731 M
(nter\) + "." + QFileInfo\(fileName\).suffix\(\);) s
5 720 M
(        counter++;) s
5 709 M
(    }) s
5 687 M
(    QString destinationPath = destinationDir + uniqueFileName;) s
5 676 M
(    // Copy the image to the destination directory) s
5 665 M
(    QFile file\(imagePath\);) s
5 654 M
(    if \(!file.copy\(destinationPath\)\) {) s
5 643 M
(        QMessageBox::warning\(this, "File Error", "Could not copy the image file."\);) s
5 632 M
(        isProcessing = false;) s
5 621 M
(        return;) s
5 610 M
(    }) s
5 588 M
(    // Image image\("/Images/" + QFileInfo\(imagePath\).fileName\(\)\);) s
5 577 M
(    Image image\("/Images/" + uniqueFileName\);) s
5 555 M
(    Descriptor descriptor\(0, cost.toDouble\(\), title, source, access, image\);) s
5 533 M
(    // Save descriptor to JSON) s
5 522 M
(    QFile jsonFile\(Librarypath\);) s
5 511 M
(    if \(!jsonFile.open\(QIODevice::ReadOnly\)\) {) s
5 500 M
(        QMessageBox::warning\(this, "File Error", "Could not open the library file."\);) s
5 489 M
(        isProcessing = false;) s
5 478 M
(        return;) s
5 467 M
(    }) s
5 445 M
(    QJsonDocument doc = QJsonDocument::fromJson\(jsonFile.readAll\(\)\);) s
5 434 M
(    jsonFile.close\(\);) s
5 412 M
(    QJsonObject obj = doc.object\(\);) s
5 401 M
(    QJsonArray array = obj["library"].toArray\(\);) s
5 379 M
(    QJsonObject newDescriptor;) s
5 368 M
(    newDescriptor["id"] = array.size\(\) + 1;) s
5 357 M
(    newDescriptor["cost"] = cost.toDouble\(\);) s
5 346 M
(    newDescriptor["title"] = title;) s
5 335 M
(    newDescriptor["source"] = source;) s
5 324 M
(    newDescriptor["access"] = QString\(access\);) s
5 313 M
(    // newDescriptor["Imagepath"] = "/Images/" + QFileInfo\(imagePath\).fileName\(\);) s
5 302 M
(    newDescriptor["Imagepath"] = "/Images/" + uniqueFileName;) s
5 291 M
(    ) s
5 269 M
(    array.append\(newDescriptor\);) s
5 258 M
(    obj["library"] = array;) s
5 236 M
(    if \(!jsonFile.open\(QIODevice::WriteOnly\)\) {) s
5 225 M
(        QMessageBox::warning\(this, "File Error", "Could not open the library file for writi) s
5 214 M
(ng."\);) s
5 203 M
(        isProcessing = false;) s
5 192 M
(        return;) s
5 181 M
(    }) s
5 159 M
(    jsonFile.write\(QJsonDocument\(obj\).toJson\(\)\);) s
5 148 M
(    jsonFile.close\(\);) s
5 126 M
(    // Close the dialog) s
5 115 M
(    accept\(\);) s
5 104 M
(    qDebug\(\) << "on_save_the_descriptor_clicked: Descriptor saved successfully";) s
5 82 M
(    isProcessing = false; // Reset the flag) s
5 71 M
(}) s
5 49 M
(void Add_New_Descriptor::setLibraryPath\(QString Librarypath\)) s
5 38 M
({) s
5 27 M
(    this->Librarypath = Librarypath;) s
5 16 M
(}) s
_R
S
%%Page: (1) 4
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (descriptor.cpp) def
/fdir (.) def
/ftail (descriptor.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:40 2025) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(#include "descriptor.hpp") s
5 731 M
(#include <QJsonArray>) s
5 709 M
(Descriptor::Descriptor\(const Image& img\)) s
5 698 M
(    : idDes\(0\), cost\(0\), title\("UKNOWN"\),) s
5 687 M
(      source\("UKNOWN"\), access\('L'\), image\(img\), nextDescriptor\(nullptr\) {}) s
5 665 M
(Descriptor::Descriptor\(int idDesc, const Image& img\)) s
5 654 M
(    : idDes\(idDesc\), cost\(0\), title\("UKNOWN"\),) s
5 643 M
(      source\("UKNOWN"\), access\('L'\), image\(img\), nextDescriptor\(nullptr\) {}) s
5 621 M
(Descriptor::Descriptor\(int idDesc, double costValue, const Image& img\)) s
5 610 M
(    : idDes\(idDesc\), cost\(costValue\), title\("UKNOWN"\),) s
5 599 M
(      source\("UKNOWN"\), access\('L'\), image\(img\), nextDescriptor\(nullptr\) {}) s
5 577 M
(Descriptor::Descriptor\(int idDesc, double costValue, const QString& descTitle, const Image&) s
5 566 M
( img\)) s
5 555 M
(    : idDes\(idDesc\), cost\(costValue\), title\(descTitle\),) s
5 544 M
(      source\("UKNOWN"\), access\('L'\), image\(img\), nextDescriptor\(nullptr\) {}) s
5 522 M
(Descriptor::Descriptor\(int idDesc, double costValue, const QString& descTitle,) s
5 511 M
(                       const QString& descSource, const Image& img\)) s
5 500 M
(    : idDes\(idDesc\), cost\(costValue\), title\(descTitle\),) s
5 489 M
(      source\(descSource\), access\('L'\), image\(img\), nextDescriptor\(nullptr\) {}) s
5 467 M
(Descriptor::Descriptor\(int idDesc, double costValue, const QString& descTitle,) s
5 456 M
(                       const QString& descSource, const char descAccess, const Image& img\)) s
5 445 M
(    : idDes\(idDesc\), cost\(costValue\), title\(descTitle\),) s
5 434 M
(      source\(descSource\), access\(descAccess\), image\(img\), nextDescriptor\(nullptr\) {}) s
5 379 M
(unsigned int Descriptor::getIdDescriptor\(\) const { return this->idDes; }) s
5 368 M
(double Descriptor::getCost\(\) const { return this->cost; }) s
5 357 M
(QString Descriptor::getTitle\(\) const { return this->title; }) s
5 346 M
(QString Descriptor::getSource\(\) const { return this->source; }) s
5 335 M
(char Descriptor::getAccess\(\) const { return this->access; }) s
5 324 M
(Image Descriptor::getImage\(\) const { return this->image; }) s
5 302 M
(Descriptor* Descriptor::getNextDescriptor\(\) const { return this->nextDescriptor; }) s
5 280 M
(void Descriptor::setIdDescriptor\(int newIdDes\) { this->idDes = newIdDes; }) s
5 269 M
(void Descriptor::setCost\(double newCost\)  { this->cost = newCost; }) s
5 258 M
(void Descriptor::setTitle\(const QString& descTitle\) { this->title = descTitle; }) s
5 247 M
(void Descriptor::setSource\(const QString& descSource\) { this->source = descSource; }) s
5 236 M
(void Descriptor::setAccess\(const char& descAccess\) { this->access = descAccess; }) s
5 225 M
(void Descriptor::setImage\(const Image& img\) { this->image = img; }) s
5 203 M
(void Descriptor::setNextDescriptor\(Descriptor* nextDesc\) { this->nextDescriptor = nextDesc;) s
5 192 M
( }) s
5 170 M
(QPixmap Descriptor::cvMatToQPixmap\(const cv::Mat &mat\) const {) s
5 159 M
(    // Step 1: Convert cv::Mat to QImage) s
5 148 M
(    QImage img;) s
5 137 M
(    if \(mat.channels\(\) == 1\) {) s
5 126 M
(        // Grayscale image) s
5 115 M
(        img = QImage\(mat.data, mat.cols, mat.rows, mat.step, QImage::Format_Grayscale8\);) s
5 104 M
(    } else if \(mat.channels\(\) == 3\) {) s
5 93 M
(        // Convert BGR to RGB) s
5 82 M
(        cv::Mat rgb;) s
5 71 M
(        cv::cvtColor\(mat, rgb, cv::COLOR_BGR2RGB\);) s
5 60 M
(        img = QImage\(rgb.data, rgb.cols, rgb.rows, rgb.step, QImage::Format_RGB888\);) s
5 49 M
(    } else if \(mat.channels\(\) == 4\) {) s
5 38 M
(        // Direct BGRA to QImage with alpha) s
5 27 M
(        img = QImage\(mat.data, mat.cols, mat.rows, mat.step, QImage::Format_ARGB32\);) s
5 16 M
(    } else {) s
5 5 M
(        throw std::invalid_argument\("Unsupported cv::Mat format."\);) s
_R
S
%%Page: (2) 5
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (descriptor.cpp) def
/fdir (.) def
/ftail (descriptor.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:40 2025) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(    }) s
5 720 M
(    // Ensure the QImage is valid before converting to QPixmap) s
5 709 M
(    if \(img.isNull\(\)\) {) s
5 698 M
(        throw std::runtime_error\("Failed to convert cv::Mat to QImage"\);) s
5 687 M
(    }) s
5 665 M
(    // Step 2: Convert QImage to QPixmap) s
5 654 M
(    QPixmap pixmap = QPixmap::fromImage\(img\);) s
5 643 M
(    if \(pixmap.isNull\(\)\) {) s
5 632 M
(        throw std::runtime_error\("Failed to convert QImage to QPixmap"\);) s
5 621 M
(    }) s
5 599 M
(    return pixmap;) s
5 588 M
(}) s
5 577 M
(cv::Mat Descriptor::QPixmapToCvMat\(const QPixmap &pixmap\) const {) s
5 566 M
(    QImage qImage = pixmap.toImage\(\).convertToFormat\(QImage::Format_ARGB32\);) s
5 544 M
(    cv::Mat mat\(qImage.height\(\), qImage.width\(\), CV_8UC4, const_cast<uchar*>\(qImage.bits\(\)\)) s
5 533 M
(, qImage.bytesPerLine\(\)\);) s
5 511 M
(    // Convert ARGB to BGR) s
5 500 M
(    cv::Mat matBGR;) s
5 489 M
(    cv::cvtColor\(mat, matBGR, cv::COLOR_BGRA2BGR\);) s
5 467 M
(    return matBGR;) s
5 456 M
(}) s
5 445 M
(void Descriptor::display\(\) const {) s
5 434 M
(    qDebug\(\)  << "Descriptor ID: " << idDes ;) s
5 412 M
(}) s
5 379 M
(QJsonObject Descriptor::toJson\(\) const {) s
5 368 M
(    QJsonObject json;) s
5 357 M
(    json["Imagepath"] = image.getPath\(\);) s
5 346 M
(    json["access"] = QString\(access\);) s
5 335 M
(    json["cost"] = cost;) s
5 324 M
(    json["id"] = static_cast<int>\(idDes\);) s
5 313 M
(    json["source"] = source;) s
5 302 M
(    json["title"] = title;) s
5 291 M
(   ) s
5 280 M
(    return json;) s
5 269 M
(}) s
_R
S
%%Page: (1) 6
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (descriptordetails.cpp) def
/fdir (.) def
/ftail (descriptordetails.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:40 2025) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(#include "descriptordetails.hpp") s
5 731 M
(#include "ui_descriptordetails.h") s
5 720 M
(#include <QMessageBox>) s
5 709 M
(#include "imageproccessing.hpp") s
5 698 M
(#include "ClickableLabel.hpp") s
5 687 M
(#include <QFile>) s
5 676 M
(#include <QJsonArray>) s
5 665 M
(#include <QJsonDocument>) s
5 654 M
(#include <QFileDialog>) s
5 632 M
(DescriptorDetails::DescriptorDetails\(QWidget *parent , bool access,QString LibraryPath \)) s
5 610 M
(    : QDialog\(parent\)) s
5 599 M
(    , ui\(new Ui::DescriptorDetails\)) s
5 588 M
(    , currentDescriptor\(nullptr\)) s
5 577 M
(    , access\(access\)) s
5 566 M
({) s
5 555 M
(    ui->setupUi\(this\);) s
5 533 M
(        ui->comboBox->addItem\("Gaussien Filter"\);) s
5 522 M
(        ui->comboBox->addItem\("Median Filter"\);) s
5 511 M
(        ui->comboBox->addItem\("To GrayScale"\);) s
5 500 M
(        ui->comboBox->addItem\("Edge Detection"\);) s
5 489 M
(        ui->comboBox->addItem\("Seuillage"\);) s
5 478 M
(        ui->comboBox->addItem\("Rotation"\);) s
5 467 M
(        ui->comboBox_2->addItem\("Left"\);  ) s
5 456 M
(        ui->comboBox_2->addItem\("Right"\);) s
5 445 M
(        ui->comboBox_2->addItem\("Down"\);) s
5 434 M
(        ui->comboBox_2->addItem\("Up"\);) s
5 423 M
(        ui->comboBox->addItem\("SIFT"\);) s
5 412 M
(        ui->comboBox->addItem\("Histogram"\);) s
5 401 M
(        ui->comboBox->addItem\("Erosion"\);) s
5 368 M
(        ui->filtreButton->setVisible\(true\);) s
5 357 M
(        ui->comboBox->setVisible\(true\);) s
5 346 M
(        ui->FilteredImageLabel->setVisible\(true\);) s
5 324 M
(        ui->thresholdLabel->setText\("Threshold:"\);) s
5 313 M
(        ui->thresholdLabel->setVisible\(false\); ) s
5 302 M
(        ui->thresholdInput->setVisible\(false\);) s
5 291 M
(        ui->comboBox_2->setVisible\(false\); ) s
5 269 M
(        ui->kernelsizelabel->setText\("Kernel size"\);) s
5 258 M
(        ui->kernelsizelabel->setVisible\(false\); ) s
5 247 M
(        ui->Kernelsizeinput->setVisible\(false\);) s
5 225 M
(        connect\(ui->comboBox, QOverload<int>::of\(&QComboBox::currentIndexChanged\), this, &D) s
5 214 M
(escriptorDetails::onFilterSelectionChanged\);) s
5 203 M
(        connect\(ui->FilteredImageLabel, &ClickableLabel::clicked, this, [this]\(\) {onLabelCl) s
5 192 M
(icked\(ui->FilteredImageLabel\);}\);) s
5 181 M
(        connect\(ui->ImageLabel, &ClickableLabel::clicked, this, [this]\(\) {onLabelClicked\(ui) s
5 170 M
(->ImageLabel\);}\);) s
5 159 M
(        ) s
5 148 M
(        QPixmap pixmap\(":/AppImages/traiter.png"\); ) s
5 137 M
(        pixmap = pixmap.scaled\(ui->label_icone_1->size\(\), Qt::KeepAspectRatio, Qt::SmoothTr) s
5 126 M
(ansformation\); // Redimensionne l'image tout en gardant les proportions) s
5 115 M
(        ui->label_icone_1->setPixmap\(pixmap\);) s
5 104 M
(        ui->label_icone_2->setPixmap\(pixmap\);) s
5 82 M
(}) s
5 49 M
(DescriptorDetails::~DescriptorDetails\(\)) s
5 38 M
({) s
5 27 M
(    delete ui;) s
5 16 M
(}) s
_R
S
%%Page: (2) 7
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (descriptordetails.cpp) def
/fdir (.) def
/ftail (descriptordetails.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:40 2025) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(void DescriptorDetails::setLibraryPath\(QString libraryPath\){) s
5 731 M
(    this->LibraryPath = libraryPath;) s
5 720 M
(}) s
5 698 M
(QString DescriptorDetails::getLibraryPath\(\){) s
5 687 M
(    return this->LibraryPath;) s
5 676 M
(}) s
5 654 M
(void DescriptorDetails::setDescriptor\(Descriptor* descriptor\) {) s
5 643 M
(    currentDescriptor = descriptor; // Store the current descriptor) s
5 621 M
(    // ui->idLabel->setText\(QString::number\(descriptor->getIdDescriptor\(\)\)\);) s
5 610 M
(    // ui->costLabel->setText\(QString::number\(descriptor->getCost\(\)\)\);) s
5 599 M
(    // ui->titleLabel->setText\(descriptor->getTitle\(\)\);) s
5 588 M
(    // ui->sourceLabel->setText\(descriptor->getSource\(\)\);) s
5 577 M
(    // ui->accessLabel->setText\(QString\(descriptor->getAccess\(\)\)\);) s
5 566 M
(    QString appPath = QCoreApplication::applicationDirPath\(\);) s
5 544 M
(    // Load the image directly from the file path) s
5 533 M
(    QPixmap pixmap\(appPath + descriptor->getImage\(\).getPath\(\)\);) s
5 522 M
(    if \(pixmap.isNull\(\)\) {) s
5 511 M
(        QMessageBox::warning\(this, "Error", "Failed to load the image. Check the file path ) s
5 500 M
(or format."\);) s
5 489 M
(        return;) s
5 478 M
(    }) s
5 456 M
(    ui->ImageLabel->setPixmap\(pixmap.scaled\(ui->ImageLabel->size\(\), Qt::KeepAspectRatio, Qt) s
5 445 M
(::SmoothTransformation\)\);) s
5 434 M
(    ui->ImageLabel->setAlignment\(Qt::AlignCenter\);) s
5 423 M
( if\(access\){) s
5 412 M
(    // Clear the filtered image label) s
5 401 M
(    ui->FilteredImageLabel->clear\(\);) s
5 390 M
(    ui->FilteredImageLabel->setPixmap\(QPixmap\(\)\);) s
5 379 M
( }) s
5 368 M
(}) s
5 346 M
(void DescriptorDetails::onFilterSelectionChanged\(int index\) {) s
5 335 M
(    QString selectedFilter = ui->comboBox->itemText\(index\);) s
5 313 M
(    // Si le filtre "Seuillage" est s\303\251lectionn\303\251, afficher le champ de saisie du seuil) s
5 302 M
(    if \(selectedFilter == "Seuillage"\) {) s
5 291 M
(        ui->thresholdLabel->setVisible\(true\);) s
5 280 M
(        ui->thresholdInput->setVisible\(true\);) s
5 269 M
(    } else {) s
5 258 M
(        // Cacher le champ pour tous les autres filtres) s
5 247 M
(        ui->thresholdLabel->setVisible\(false\);) s
5 236 M
(        ui->thresholdInput->setVisible\(false\);) s
5 225 M
(    }) s
5 214 M
(    if \(selectedFilter == "Rotation"\) {) s
5 203 M
(        ui->comboBox_2->setVisible\(true\);) s
5 192 M
(    } else {) s
5 181 M
(        // Cacher le champ pour tous les autres filtres) s
5 170 M
(        ui->comboBox_2->setVisible\(false\);) s
5 159 M
(    }) s
5 148 M
(    if \(selectedFilter =="Erosion"\) {) s
5 137 M
(        ui->Kernelsizeinput->setVisible\(true\);) s
5 126 M
(        ui->kernelsizelabel->setVisible\(true\);) s
5 115 M
(    } else {) s
5 104 M
(        // Cacher le champ pour tous les autres filtres) s
5 93 M
(        ui->Kernelsizeinput->setVisible\(false\);) s
5 82 M
(        ui->kernelsizelabel->setVisible\(false\);) s
5 71 M
(    }) s
5 49 M
(}   ) s
5 16 M
(void DescriptorDetails::on_filtreButton_clicked\(\) {) s
5 5 M
(    QString filter = ui->comboBox->currentText\(\);) s
_R
S
%%Page: (3) 8
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (descriptordetails.cpp) def
/fdir (.) def
/ftail (descriptordetails.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:40 2025) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(    QString Rotate = ui->comboBox_2->currentText\(\);) s
5 720 M
(    ui->FilteredImageLabel->clear\(\);) s
5 698 M
(    QString imagePath = currentDescriptor->getImage\(\).getPath\(\);) s
5 676 M
(    QString appPath = QCoreApplication::applicationDirPath\(\);) s
5 665 M
(    imagePath = appPath + imagePath;) s
5 654 M
(    Mat inputImage = cv::imread\(imagePath.toStdString\(\)\);) s
5 632 M
(    if \(inputImage.empty\(\)\) {) s
5 621 M
(        QMessageBox::warning\(this, "Error", "Failed to convert QPixmap to cv::Mat."\);) s
5 610 M
(        return;) s
5 599 M
(    }) s
5 577 M
(    // Apply the selected filter) s
5 566 M
(    ImageProccessing processor;) s
5 555 M
(    try {) s
5 544 M
(        Mat outputImage;) s
5 522 M
(        if \(filter == "Gaussien Filter"\) {) s
5 511 M
(            // // Apply Gaussian filter with 5x5 kernel and sigma = 1.0) s
5 500 M
(            outputImage = processor.applyGaussianFilter\(inputImage\);) s
5 489 M
(            // imwrite\(outputImage,"test.jpg"\)) s
5 478 M
(        } else if \(filter == "Edge Detection"\) {) s
5 467 M
(            // Apply edge detection with 3*3 sobel filter ) s
5 456 M
(            outputImage = processor.applyEdgeDetection\(inputImage\);) s
5 434 M
(        } else if \(filter == "Median Filter"\) {) s
5 423 M
(            // Apply Median filter with kernel size = 5) s
5 412 M
(            outputImage = processor.applyCustomMedianFilter\(inputImage, 3\);) s
5 390 M
(        } else if \(filter == "Rotation"\) {) s
5 368 M
(            if\(Rotate=="Down"\){) s
5 357 M
(                outputImage = processor.rotateImage\(inputImage, 180\);) s
5 346 M
(            }else if\(Rotate=="Up"\){) s
5 335 M
(                outputImage = processor.rotateImage\(inputImage, 0\);) s
5 324 M
(            }else if\(Rotate=="Left"\){) s
5 313 M
(                outputImage = processor.rotateImage\(inputImage, 270\);) s
5 302 M
(            }else if\(Rotate=="Right"\){) s
5 291 M
(                outputImage = processor.rotateImage\(inputImage, 90\);) s
5 280 M
(            }) s
5 258 M
(        } else if \(filter == "To GrayScale"\) {) s
5 247 M
(            // Convert to grayscale) s
5 236 M
(            outputImage = processor.toGrayScale\(inputImage\);) s
5 214 M
(        } else if \(filter == "SIFT"\) {) s
5 203 M
(            outputImage = processor.applySIFT\(inputImage\);) s
5 181 M
(        } else if \(filter == "Seuillage"\) {   ) s
5 159 M
(            int thresholdValue ; ) s
5 148 M
(            if \(ui->thresholdInput->isVisible\(\)\) {) s
5 137 M
(                bool ok;) s
5 126 M
(                thresholdValue = ui->thresholdInput->text\(\).toInt\(&ok\);) s
5 115 M
(                if \(!ok\) {) s
5 104 M
(                    QMessageBox::warning\(this, "Erreur", "Valeur de seuil invalide."\);) s
5 93 M
(                    return;) s
5 82 M
(                }) s
5 71 M
(            }) s
5 60 M
(            outputImage = processor.applyThreshold\(inputImage,thresholdValue\);) s
5 38 M
(        } else if \(filter == "Histogram"\) {) s
5 27 M
(            // Calcul de l'histogramme) s
5 16 M
(            outputImage = processor.calculateHistogram\(inputImage\);) s
_R
S
%%Page: (4) 9
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (descriptordetails.cpp) def
/fdir (.) def
/ftail (descriptordetails.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:40 2025) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        } else if \(filter =="Erosion"\) {) s
5 720 M
(            int Kernelsize ; ) s
5 709 M
(            if \(ui->Kernelsizeinput->isVisible\(\)\) {) s
5 698 M
(                bool ok;) s
5 687 M
(                Kernelsize = ui->Kernelsizeinput->text\(\).toInt\(&ok\);) s
5 676 M
(                if \(!ok\) {) s
5 665 M
(                    QMessageBox::warning\(this, "Erreur", "Valeur de seuil invalide."\);) s
5 654 M
(                    return;) s
5 643 M
(                }) s
5 632 M
(            }) s
5 621 M
(            outputImage = processor.applyErosion\(inputImage,Kernelsize\);) s
5 599 M
(        } else if \(filter =="Erosion"\){ ) s
5 588 M
(            outputImage = processor.applyErosion\(inputImage,25\);) s
5 566 M
(        } else {    ) s
5 555 M
(            throw invalid_argument\("Invalid filter selected."\);) s
5 544 M
(        }) s
5 522 M
(        QImage filteredQImage;) s
5 500 M
(        if \(outputImage.channels\(\) == 4\) { // ARGB image) s
5 489 M
(            cv::Mat clonedImage = outputImage.clone\(\); // Clone ensures memory remains vali) s
5 478 M
(d) s
5 467 M
(            filteredQImage = QImage\(clonedImage.data, clonedImage.cols, clonedImage.rows, c) s
5 456 M
(lonedImage.step, QImage::Format_ARGB32\).copy\(\);) s
5 445 M
(        } else if \(outputImage.channels\(\) == 3\) { // RGB image) s
5 434 M
(            cv::Mat rgbImage;) s
5 423 M
(            cv::cvtColor\(outputImage, rgbImage, cv::COLOR_BGR2RGB\); // Convert BGR to RGB) s
5 412 M
(            QImage tempImage\(rgbImage.data, rgbImage.cols, rgbImage.rows, rgbImage.step, QI) s
5 401 M
(mage::Format_RGB888\);) s
5 390 M
(            filteredQImage = tempImage.copy\(\); // Copy ensures memory remains valid) s
5 379 M
(        } else if \(outputImage.channels\(\) == 1\) { // Grayscale image) s
5 368 M
(            QImage tempImage\(outputImage.data, outputImage.cols, outputImage.rows, outputIm) s
5 357 M
(age.step, QImage::Format_Grayscale8\);) s
5 346 M
(            filteredQImage = tempImage.copy\(\); // Copy ensures memory remains valid) s
5 335 M
(        } else {) s
5 324 M
(            throw std::runtime_error\("Unsupported image format."\);) s
5 313 M
(        }) s
5 291 M
(        // Display the filtered image in the QLabel) s
5 280 M
(        ui->FilteredImageLabel->setPixmap\() s
5 269 M
(            QPixmap::fromImage\(filteredQImage\).scaled\() s
5 258 M
(                ui->FilteredImageLabel->size\(\),) s
5 247 M
(                Qt::KeepAspectRatio,) s
5 236 M
(                Qt::SmoothTransformation) s
5 225 M
(                \)) s
5 214 M
(            \);) s
5 203 M
(        ui->FilteredImageLabel->setAlignment\(Qt::AlignCenter\);) s
5 181 M
(        //QMessageBox::information\(this, "Filter Applied", "The filter has been applied suc) s
5 170 M
(cessfully."\);) s
5 159 M
(    } catch \(const exception& e\) {) s
5 148 M
(        QMessageBox::critical\(this, "Error", QString\("An error occurred: %1"\).arg\(e.what\(\)\)) s
5 137 M
(\);) s
5 126 M
(    }) s
5 115 M
(}) s
5 93 M
(void DescriptorDetails::on_SaveChanges_clicked\(\)) s
5 82 M
({) s
5 71 M
(    QString libraryPath = this->getLibraryPath\(\);) s
5 49 M
(    qDebug\(\) << "Image Path";) s
5 38 M
(    qDebug\(\) << currentDescriptor->getImage\(\).getPath\(\);) s
5 16 M
(    unsigned int CurrentIdD = currentDescriptor->getIdDescriptor\(\);) s
5 5 M
(    QString appPath = QCoreApplication::applicationDirPath\(\);) s
_R
S
%%Page: (5) 10
%%BeginPageSetup
_S
18 36 translate
/pagenum 5 def
/fname (descriptordetails.cpp) def
/fdir (.) def
/ftail (descriptordetails.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:40 2025) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(    QJsonObject curObj =  currentDescriptor->toJson\(\);) s
5 709 M
(    // load the library) s
5 698 M
(    qDebug\(\) << "Library to edit";) s
5 687 M
(    qDebug\(\) << libraryPath;) s
5 676 M
(    QFile file\( libraryPath\);) s
5 654 M
(    if \(!file.open\(QIODevice::ReadOnly\)\) {) s
5 643 M
(        qDebug\(\) << "Error: Could not open file";) s
5 632 M
(        return;) s
5 621 M
(    }) s
5 599 M
(    // Read the existing JSON file) s
5 588 M
(    QByteArray data = file.readAll\(\);) s
5 577 M
(    file.close\(\);) s
5 566 M
(    QJsonDocument doc\(QJsonDocument::fromJson\(data\)\);) s
5 555 M
(    QJsonObject obj = doc.object\(\);) s
5 544 M
(    QJsonArray array = obj["library"].toArray\(\);) s
5 533 M
(    QJsonArray newArray;) s
5 511 M
(    QString imagePathToDelete;) s
5 489 M
(    for \(int i = 0; i < array.size\(\); i++\) {) s
5 467 M
(        QJsonObject obj = array[i].toObject\(\);) s
5 445 M
(        if \(obj["id"].toInt\(\) == CurrentIdD\) {) s
5 434 M
(            newArray.append\(curObj\);) s
5 423 M
(        }else{) s
5 412 M
(            newArray.append\(obj\);) s
5 401 M
(        }) s
5 379 M
(    }) s
5 368 M
(    obj["library"] = newArray;) s
5 346 M
(    if \(!file.open\(QIODevice::WriteOnly\)\) {) s
5 335 M
(        qDebug\(\) << "Error: Could not open file";) s
5 324 M
(        return;) s
5 313 M
(    }) s
5 291 M
(    file.write\(QJsonDocument\(obj\).toJson\(\)\);) s
5 280 M
(    file.close\(\);) s
5 258 M
(    QPixmap pixmap = ui->FilteredImageLabel->pixmap\(Qt::ReturnByValue\);) s
5 236 M
(    // Check if the pixmap is valid) s
5 225 M
(    if \(!pixmap.isNull\(\)\) {) s
5 214 M
(        QImage filteredQImage = pixmap.toImage\(\);) s
5 192 M
(        // Open a file dialog to choose the save location) s
5 181 M
(        QString savePath = QFileDialog::getSaveFileName\(this, "Save Filtered Image", "", "I) s
5 170 M
(mages \(*.png *.jpg *.bmp\)"\);) s
5 148 M
(        // Save the image if a path is provided) s
5 137 M
(        if \(!savePath.isEmpty\(\)\) {) s
5 126 M
(            if \(!savePath.contains\('.'\)\) {) s
5 115 M
(                    savePath.append\(".png"\);}) s
5 104 M
(    ) s
5 93 M
(            filteredQImage.save\(savePath\);) s
5 82 M
(        }) s
5 71 M
(        qDebug\(\) << "Saved to path:"<<savePath;) s
5 49 M
(    } else {) s
5 38 M
(        QMessageBox::warning\(this, "Save Error", "No filtered image to save."\);) s
5 27 M
(    }) s
_R
S
%%Page: (6) 11
%%BeginPageSetup
_S
18 36 translate
/pagenum 6 def
/fname (descriptordetails.cpp) def
/fdir (.) def
/ftail (descriptordetails.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:40 2025) def
/pagenumstr (6) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(}) s
5 720 M
(void DescriptorDetails::onLabelClicked\(QLabel *clickedLabel\) {) s
5 709 M
(    // V\303\251rifiez si une image est charg\303\251e dans le QLabel cliqu\303\251) s
5 698 M
(    QPixmap pixmap = clickedLabel->pixmap\(Qt::ReturnByValue\);) s
5 687 M
(    ) s
5 676 M
(    if \(pixmap.isNull\(\)\) {) s
5 665 M
(        QMessageBox::warning\(this, "Erreur", "Aucune image \303\240 afficher."\);) s
5 654 M
(        return;) s
5 643 M
(    }) s
5 621 M
(    // Cr\303\251ez une nouvelle fen\303\252tre pour afficher l'image) s
5 610 M
(    QDialog *imageDialog = new QDialog\(this\);) s
5 599 M
(    imageDialog->setWindowTitle\("Image Agrandie"\);) s
5 577 M
(    // Configurez un QLabel dans la fen\303\252tre) s
5 566 M
(    QLabel *imageLabel = new QLabel\(imageDialog\);) s
5 555 M
(    imageLabel->setPixmap\(pixmap\);) s
5 544 M
(    imageLabel->setAlignment\(Qt::AlignCenter\);) s
5 533 M
(    imageLabel->setScaledContents\(true\);) s
5 511 M
(    // Ajustez la taille de la fen\303\252tre) s
5 500 M
(    imageDialog->resize\(800, 600\);  // Taille par d\303\251faut) s
5 489 M
(    QVBoxLayout *layout = new QVBoxLayout\(imageDialog\);) s
5 478 M
(    layout->addWidget\(imageLabel\);) s
5 467 M
(    imageDialog->setLayout\(layout\);) s
5 445 M
(    // Affichez la fen\303\252tre sans bloquer l'ex\303\251cution) s
5 434 M
(    imageDialog->show\(\);) s
5 423 M
(}) s
_R
S
%%Page: (1) 12
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (image.cpp) def
/fdir (.) def
/ftail (image.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:37 2025) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(#include "image.hpp") s
5 731 M
(#include <opencv2/opencv.hpp>) s
5 720 M
(#include <QString>) s
5 709 M
(#include <iostream>) s
5 698 M
(#include <fstream>) s
5 687 M
(#include <QDebug>) s
5 676 M
(#include <QCoreApplication>) s
5 654 M
(using namespace std; ) s
5 643 M
(using namespace cv; ) s
5 621 M
(// Constructeur de la classe Image : initialise une image \303\240 partir d'un chemin donn\303\251.) s
5 599 M
(Image::Image\(const QString& imgPath\) {) s
5 588 M
(    if \(imgPath.isEmpty\(\)\) {) s
5 577 M
(        qDebug\(\) << "Error: Image path is empty.";) s
5 566 M
(        return;) s
5 555 M
(    }) s
5 544 M
(    QString appPath = QCoreApplication::applicationDirPath\(\);) s
5 522 M
(    this->path = imgPath;) s
5 511 M
(    qDebug\(\) << "Loading image:" << imgPath;) s
5 500 M
(    loadImage\(appPath+imgPath\);) s
5 489 M
(}) s
5 467 M
(// Charge une image depuis un chemin donn\303\251 et initialise ses propri\303\251t\303\251s.) s
5 445 M
(void Image::loadImage\(const QString& imgPath\) {) s
5 434 M
(    Mat image = imread\(imgPath.toStdString\(\), IMREAD_COLOR\);) s
5 423 M
(    this->content = image;) s
5 401 M
(    if \(image.empty\(\)\) {) s
5 390 M
(        cerr << "Error while loading the image: " << imgPath.toStdString\(\) << endl;) s
5 379 M
(        exit\(1\);) s
5 368 M
(    }) s
5 346 M
(    int dot = imgPath.lastIndexOf\('.'\);) s
5 335 M
(    if \(dot != -1\) {) s
5 324 M
(        this->format = imgPath.mid\(dot + 1\);) s
5 313 M
(    }) s
5 302 M
(        // Calcule le ratio de compression de l'image.) s
5 280 M
(    this->compressionRatio = calculateCompressionRatio\(imgPath\);) s
5 269 M
(}) s
5 247 M
(// Retourne le contenu de l'image sous forme d'un objet OpenCV Mat.) s
5 225 M
(Mat Image::getContent\(\) const {) s
5 214 M
(    return this->content;) s
5 203 M
(}) s
5 181 M
(// Calcule le ratio de compression de l'image \(taille compress\303\251e / taille non compress\303\251e\)) s
5 170 M
(.) s
5 148 M
(double Image::calculateCompressionRatio\(const QString& imgPath\) const {) s
5 137 M
(    Mat image = cv::imread\(imgPath.toStdString\(\), IMREAD_COLOR\);) s
5 115 M
(    if \(image.empty\(\)\) {) s
5 104 M
(        cerr << "Error reading the image!" << endl;) s
5 93 M
(        return 0.0;) s
5 82 M
(    }) s
5 71 M
(    // Taille non compress\303\251e bas\303\251e sur les dimensions et les canaux.) s
5 49 M
(    size_t uncompressedSize = image.rows * image.cols * image.channels\(\);) s
5 38 M
(    // Taille compress\303\251e bas\303\251e sur la taille r\303\251elle du fichier.) s
5 16 M
(    ifstream file\(imgPath.toStdString\(\), ios::binary | ios::ate\);) s
5 5 M
(    if \(!file.is_open\(\)\) {) s
_R
S
%%Page: (2) 13
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (image.cpp) def
/fdir (.) def
/ftail (image.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:37 2025) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        cerr << "Error while opening the file to calculate the ratio." << endl;) s
5 731 M
(        return 0.0;) s
5 720 M
(    }) s
5 698 M
(    size_t compressedSize = file.tellg\(\);) s
5 687 M
(    file.close\(\);) s
5 665 M
(    return static_cast<double>\(compressedSize\) / uncompressedSize;) s
5 654 M
(}) s
5 632 M
(// Affiche l'image dans une fen\303\252tre en utilisant OpenCV.) s
5 610 M
(void Image::showImage\(const QString& imgPath\) const {) s
5 599 M
(    Mat image = imread\(imgPath.toStdString\(\), IMREAD_COLOR\);) s
5 588 M
(    imshow\("Image", image\);) s
5 577 M
(    waitKey\(0\);) s
5 566 M
(}) s
5 544 M
(// Retourne le format du fichier image \(extension\).) s
5 522 M
(QString Image::getFormat\(\) const {) s
5 511 M
(    return this->format;) s
5 500 M
(}) s
5 478 M
(// Retourne le chemin actuel de l'image.) s
5 456 M
(QString Image::getPath\(\) const {) s
5 445 M
(    return this->path;) s
5 434 M
(}) s
5 412 M
(// Retourne le ratio de compression de l'image.) s
5 390 M
(double Image::getCompressionRatio\(\) const {) s
5 379 M
(    return this->compressionRatio;) s
5 368 M
(}) s
5 357 M
(// Retourne l'identifiant de l'image.) s
5 335 M
(int Image::getId\(\) const {) s
5 324 M
(    return this->idImage;) s
5 313 M
(}) s
5 302 M
(// Met \303\240 jour le chemin de l'image.) s
5 280 M
(void Image::setPath\(const QString& newPath\) {) s
5 269 M
(    this->path = newPath;) s
5 258 M
(}) s
5 247 M
(// Met \303\240 jour l'identifiant de l'image.) s
5 225 M
(void Image::setId\(const int newID\) {) s
5 214 M
(    this->idImage = newID;) s
5 203 M
(}) s
5 181 M
(// Retourne l'image sous forme de QPixmap \(pour l'int\303\251gration avec Qt\).) s
5 159 M
(QPixmap Image::getPixmap\(\) const {) s
5 148 M
(    if \(content.empty\(\)\) {) s
5 137 M
(        return QPixmap\(\);) s
5 126 M
(    }) s
5 115 M
(    // Convertit l'image OpenCV en QImage, puis en QPixmap.) s
5 93 M
(    QImage qImage\(content.data, content.cols, content.rows, content.step, QImage::Format_RG) s
5 82 M
(B888\);) s
5 71 M
(    return QPixmap::fromImage\(qImage.rgbSwapped\(\)\);) s
5 60 M
(}) s
_R
S
%%Page: (1) 14
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (imageproccessing.cpp) def
/fdir (.) def
/ftail (imageproccessing.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:39 2025) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(#include "imageproccessing.hpp") s
5 731 M
(#include "kernels.hpp") s
5 720 M
(#include <QDebug>) s
5 709 M
(#include <cmath>) s
5 687 M
(ImageProccessing::ImageProccessing\(\) {}) s
5 665 M
(#include <opencv2/opencv.hpp>) s
5 654 M
(#include <stdexcept>) s
5 643 M
(#include <algorithm>) s
5 621 M
(using namespace cv;) s
5 610 M
(using namespace std;) s
5 588 M
(/**) s
5 577 M
( * @brief Faire pivoter une image d'un angle sp\303\251cifi\303\251 \(0, 90, 180, 270, 360\).) s
5 566 M
( * ) s
5 555 M
( * Cette fonction effectue une rotation de l'image d'entr\303\251e selon l'angle donn\303\251. Elle sup) s
5 544 M
(porte des angles) s
5 533 M
( * sp\303\251cifiques comme 0, 90, 180, 270 et 360 degr\303\251s. Les autres angles sont trait\303\251s en re) s
5 522 M
(tournant l'image d'origine.) s
5 511 M
( * ) s
5 500 M
( * @param inputImage L'image \303\240 faire pivoter.) s
5 489 M
( * @param angle L'angle de rotation \(en degr\303\251s\).) s
5 478 M
( * ) s
5 467 M
( * @return L'image pivot\303\251e de type Mat.) s
5 456 M
( */) s
5 445 M
(Mat ImageProccessing::rotateImage\(const Mat& inputImage, int angle\) {) s
5 434 M
(    ) s
5 423 M
(    Mat rotatedImage;) s
5 401 M
(    // G\303\251rer les angles de rotation sp\303\251cifiques \(0, 90, 180, 360\)) s
5 390 M
(    switch \(angle\) {) s
5 379 M
(        case 90:) s
5 368 M
(            // Rotation de 90 degr\303\251s dans le sens horaire) s
5 357 M
(            transpose\(inputImage, rotatedImage\); // Transposer \(\303\251changer les lignes et les) s
5 346 M
( colonnes\)) s
5 335 M
(            flip\(rotatedImage, rotatedImage, 1\);  // Retourner horizontalement) s
5 324 M
(            break;) s
5 313 M
(        case 180:) s
5 302 M
(            // Rotation de 180 degr\303\251s) s
5 291 M
(            flip\(inputImage, rotatedImage, -1\);  // Retourner \303\240 la fois horizontalement et) s
5 280 M
( verticalement) s
5 269 M
(            break;) s
5 258 M
(        case 270:) s
5 247 M
(            // Rotation de 270 degr\303\251s \(identique \303\240 -90 degr\303\251s\)) s
5 236 M
(            transpose\(inputImage, rotatedImage\); // Transposer \(\303\251changer les lignes et les) s
5 225 M
( colonnes\)) s
5 214 M
(            flip\(rotatedImage, rotatedImage, 0\);  // Retourner verticalement) s
5 203 M
(            break;) s
5 192 M
(        case 360:) s
5 181 M
(            // Rotation de 360 degr\303\251s \(aucun changement\)) s
5 170 M
(            rotatedImage = inputImage.clone\(\);) s
5 159 M
(            break;) s
5 148 M
(        case 0:) s
5 137 M
(        default:) s
5 126 M
(            // Si 0 degr\303\251s ou tout autre angle, retourner simplement l'image d'origine) s
5 115 M
(            rotatedImage = inputImage.clone\(\);) s
5 104 M
(            break;) s
5 93 M
(    }) s
5 71 M
(    return rotatedImage;) s
5 60 M
(}) s
5 38 M
(/**) s
5 27 M
( * @brief Applique une convolution sur une image en utilisant un noyau \(kernel\).) s
5 16 M
( * ) s
5 5 M
( * Cette fonction effectue une convolution entre une image et un noyau \(kernel\). Chaque pix) s
_R
S
%%Page: (2) 15
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (imageproccessing.cpp) def
/fdir (.) def
/ftail (imageproccessing.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:39 2025) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(el de l'image) s
5 731 M
( * est mis \303\240 jour en fonction de la somme pond\303\251r\303\251e des pixels voisins, selon les valeurs) s
5 720 M
( du noyau.) s
5 709 M
( * Le r\303\251sultat est stock\303\251 dans une nouvelle image.) s
5 698 M
( *) s
5 687 M
( * @param kernel Le noyau de convolution, une matrice 2D \(vector de vector de float\).) s
5 676 M
( * @param image L'image d'entr\303\251e sur laquelle la convolution est appliqu\303\251e.) s
5 665 M
( * ) s
5 654 M
( * @return Mat L'image de sortie apr\303\250s convolution, de type CV_64F.) s
5 643 M
( * ) s
5 632 M
( * @throws runtime_error Si l'image d'entr\303\251e est vide.) s
5 621 M
( * ) s
5 610 M
( * @note Les valeurs du noyau sont appliqu\303\251es sur chaque pixel de l'image, en prenant en c) s
5 599 M
(ompte les pixels voisins) s
5 588 M
( *       \(en utilisant des indices valides \303\240 l'int\303\251rieur de l'image\). Les bords de l'imag) s
5 577 M
(e sont trait\303\251s en) s
5 566 M
( *       ignorant les valeurs du noyau qui sortiraient de l'image.) s
5 555 M
( */) s
5 544 M
(Mat convolution\(const vector<vector<float>>& kernel, const Mat& image\) {) s
5 533 M
(    if \(image.empty\(\)\) {) s
5 522 M
(        throw runtime_error\("L'image d'entr\303\251e est vide."\);) s
5 511 M
(    }) s
5 500 M
(    ) s
5 489 M
(    int kernelWidth = kernel[0].size\(\);) s
5 478 M
(    int kernelHeight = kernel.size\(\);) s
5 467 M
(    int offsetX = kernelWidth / 2;) s
5 456 M
(    int offsetY = kernelHeight / 2;) s
5 434 M
(    // Image de sortie) s
5 423 M
(    Mat output\(image.size\(\), CV_64F\);) s
5 401 M
(    // Convolution) s
5 390 M
(    for \(int y = 0; y < image.rows; ++y\) {) s
5 379 M
(        for \(int x = 0; x < image.cols; ++x\) {) s
5 368 M
(            float sum = 0.0;) s
5 346 M
(            // Appliquer le noyau \(kernel\) autour du pixel) s
5 335 M
(            for \(int j = 0; j < kernelHeight; ++j\) {) s
5 324 M
(                for \(int i = 0; i < kernelWidth; ++i\) {) s
5 313 M
(                    int imageX = x + i - offsetX;) s
5 302 M
(                    int imageY = y + j - offsetY;) s
5 280 M
(                    // V\303\251rifier si le pixel est \303\240 l'int\303\251rieur de l'image) s
5 269 M
(                    if \(imageX >= 0 && imageX < image.cols && imageY >= 0 && imageY < image) s
5 258 M
(.rows\) {) s
5 247 M
(                        sum += kernel[j][i] * image.at<uchar>\(imageY, imageX\);) s
5 236 M
(                    }) s
5 225 M
(                }) s
5 214 M
(            }) s
5 192 M
(            // Limiter la valeur \303\240 [0, 255]) s
5 181 M
(            output.at<float>\(y, x\) = sum;) s
5 170 M
(        }) s
5 159 M
(    }) s
5 137 M
(    return output;) s
5 126 M
(}) s
5 104 M
(/**) s
5 93 M
( * @brief G\303\251n\303\250re un noyau gaussien de taille et de sigma sp\303\251cifi\303\251s.) s
5 82 M
( * ) s
5 71 M
( * Cette fonction g\303\251n\303\250re un noyau unidimensionnel de type gaussien. Le noyau est utilis\303\251) s
5 60 M
( pour des op\303\251rations) s
5 49 M
( * de filtrage, comme le flou gaussien, et peut \303\252tre utilis\303\251 dans des algorithmes de trai) s
5 38 M
(tement d'images.) s
5 27 M
( * Si certaines conditions sont remplies, un noyau gaussien fixe est utilis\303\251 \303\240 la place d) s
5 16 M
(u calcul.) s
5 5 M
( *) s
_R
S
%%Page: (3) 16
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (imageproccessing.cpp) def
/fdir (.) def
/ftail (imageproccessing.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:39 2025) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( * @param n La taille du noyau gaussien \(doit \303\252tre impair\).) s
5 731 M
( * @param sigma L'\303\251cart-type de la fonction gaussienne. Si ce param\303\250tre est n\303\251gatif ou n) s
5 720 M
(ul, une valeur par d\303\251faut) s
5 709 M
( *              est calcul\303\251e en fonction de `n`.) s
5 698 M
( * @param ktype Le type des \303\251l\303\251ments du noyau, qui peut \303\252tre soit `CV_32F` \(32 bits flot) s
5 687 M
(tants\) ou `CV_64F` \(64 bits flottants\).) s
5 676 M
( * ) s
5 665 M
( * @return Mat Le noyau gaussien g\303\251n\303\251r\303\251, de taille `n` x 1, avec le type sp\303\251cifi\303\251 par ) s
5 654 M
(`ktype`.) s
5 643 M
( * ) s
5 632 M
( * @throws cv::Exception Si `ktype` n'est pas l'un des types valides \(`CV_32F` ou `CV_64F`\)) s
5 621 M
(.) s
5 610 M
( * ) s
5 599 M
( * @note Si `n` est inf\303\251rieur ou \303\251gal \303\240 une certaine taille \(7\) et que `sigma` est nul o) s
5 588 M
(u n\303\251gatif,) s
5 577 M
( *       un noyau pr\303\251-calcul\303\251 est utilis\303\251 pour optimiser les performances.) s
5 566 M
( * ) s
5 555 M
( * @note Le noyau est normalis\303\251 de mani\303\250re \303\240 ce que la somme des \303\251l\303\251ments soit \303\251gale ) s
5 544 M
(\303\240 1.) s
5 533 M
( */) s
5 522 M
(Mat getGaussianKernel\(int n, double sigma, int ktype\) {) s
5 511 M
(    const int SMALL_GAUSSIAN_SIZE = 7;) s
5 500 M
(    static const float small_gaussian_tab[][SMALL_GAUSSIAN_SIZE] = {) s
5 489 M
(        {1.f},) s
5 478 M
(        {0.25f, 0.5f, 0.25f},) s
5 467 M
(        {0.0625f, 0.25f, 0.375f, 0.25f, 0.0625f},) s
5 456 M
(        {0.03125f, 0.109375f, 0.21875f, 0.28125f, 0.21875f, 0.109375f, 0.03125f}) s
5 445 M
(    };) s
5 423 M
(    // S\303\251lectionner un noyau fixe si les conditions sont remplies) s
5 412 M
(    const float* fixed_kernel = n % 2 == 1 && n <= SMALL_GAUSSIAN_SIZE && sigma <= 0 ?) s
5 401 M
(                                    small_gaussian_tab[n >> 1] : 0;) s
5 379 M
(    CV_Assert\(ktype == CV_32F || ktype == CV_64F\);) s
5 368 M
(    Mat kernel\(n, 1, ktype\);) s
5 357 M
(    float* cf = \(float*\)kernel.data;) s
5 346 M
(    double* cd = \(double*\)kernel.data;) s
5 324 M
(    double sigmaX = sigma > 0 ? sigma : \(\(n - 1\) * 0.5 - 1\) * 0.3 + 0.8;) s
5 313 M
(    double scale2X = -0.5 / \(sigmaX * sigmaX\);) s
5 302 M
(    double sum = 0;) s
5 280 M
(    // Calculer les valeurs du noyau) s
5 269 M
(    for \(int i = 0; i < n; i++\) {) s
5 258 M
(        double x = i - \(n - 1\) * 0.5;) s
5 247 M
(        double t = fixed_kernel ? \(double\)fixed_kernel[i] : exp\(scale2X * x * x\);) s
5 236 M
(        if \(ktype == CV_32F\) {) s
5 225 M
(            cf[i] = \(float\)t;) s
5 214 M
(            sum += cf[i];) s
5 203 M
(        } else {) s
5 192 M
(            cd[i] = t;) s
5 181 M
(            sum += cd[i];) s
5 170 M
(        }) s
5 159 M
(    }) s
5 137 M
(    // Normaliser le noyau) s
5 126 M
(    sum = 1. / sum;) s
5 115 M
(    for \(int i = 0; i < n; i++\) {) s
5 104 M
(        if \(ktype == CV_32F\)) s
5 93 M
(            cf[i] = \(float\)\(cf[i] * sum\);) s
5 82 M
(        else) s
5 71 M
(            cd[i] *= sum;) s
5 60 M
(    }) s
5 38 M
(    return kernel;) s
5 27 M
(}) s
5 5 M
(/**) s
_R
S
%%Page: (4) 17
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (imageproccessing.cpp) def
/fdir (.) def
/ftail (imageproccessing.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:39 2025) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( * @brief Applique un flou gaussien \303\240 une image en utilisant un noyau gaussien.) s
5 731 M
( * ) s
5 720 M
( * Cette fonction effectue un flou gaussien sur l'image d'entr\303\251e en utilisant un noyau gau) s
5 709 M
(ssien \303\240 deux dimensions.) s
5 698 M
( * Le noyau est soit sp\303\251cifi\303\251 par la taille `ksize`, soit calcul\303\251 automatiquement en fon) s
5 687 M
(ction de la valeur de `sigma1` et `sigma2`.) s
5 676 M
( * La fonction applique la convolution gaussienne s\303\251par\303\251e dans les directions horizontale) s
5 665 M
( et verticale.) s
5 654 M
( *) s
5 643 M
( * @param src L'image d'entr\303\251e, de type `Mat`.) s
5 632 M
( * @param dst L'image de sortie, de type `Mat`. Elle contient l'image apr\303\250s application du) s
5 621 M
( flou gaussien.) s
5 610 M
( * @param ksize La taille du noyau de convolution. Si l'une des dimensions est inf\303\251rieure ) s
5 599 M
(ou \303\251gale \303\240 z\303\251ro, elle sera calcul\303\251e automatiquement en fonction de `sigma1` et `sigma2`) s
5 588 M
(.) s
5 577 M
( * @param sigma1 L'\303\251cart-type de la distribution gaussienne dans la direction horizontale.) s
5 566 M
( Si `sigma2` est inf\303\251rieur ou \303\251gal \303\240 z\303\251ro, cette valeur est utilis\303\251e pour les deux dir) s
5 555 M
(ections.) s
5 544 M
( * @param sigma2 L'\303\251cart-type de la distribution gaussienne dans la direction verticale. S) s
5 533 M
(i cette valeur est inf\303\251rieure ou \303\251gale \303\240 z\303\251ro, `sigma1` est utilis\303\251e pour les deux dir) s
5 522 M
(ections.) s
5 511 M
( * @param borderType Le type de bordure \303\240 utiliser pour g\303\251rer les bords de l'image \(par e) s
5 500 M
(xemple, `BORDER_DEFAULT`, `BORDER_REFLECT`, etc.\).) s
5 489 M
( * ) s
5 478 M
( * @throws cv::Exception Si les tailles du noyau \(`ksize.width` et `ksize.height`\) ne sont ) s
5 467 M
(pas impaires ou si elles sont invalides.) s
5 456 M
( * ) s
5 445 M
( * @note Si `ksize` est d\303\251fini sur `\(1, 1\)`, l'image source est copi\303\251e directement dans l) s
5 434 M
('image de destination sans appliquer de flou.) s
5 423 M
( *       Si `ksize.width` ou `ksize.height` est inf\303\251rieur ou \303\251gal \303\240 z\303\251ro, la taille du ) s
5 412 M
(noyau est automatiquement calcul\303\251e en fonction de `sigma1` et `sigma2`.) s
5 401 M
( *       La fonction applique un filtrage s\303\251par\303\251 dans les directions horizontale et verti) s
5 390 M
(cale en utilisant des noyaux gaussiens calcul\303\251s avec `cv::getGaussianKernel`.) s
5 379 M
( */) s
5 368 M
(void GaussianBlur\(const Mat& src, Mat& dst, Size ksize, double sigma1, double sigma2, int b) s
5 357 M
(orderType\) {) s
5 346 M
(    if \(ksize.width == 1 && ksize.height == 1\) {) s
5 335 M
(        src.copyTo\(dst\);) s
5 324 M
(        return;) s
5 313 M
(    }) s
5 291 M
(    int depth = src.depth\(\);) s
5 280 M
(    if \(sigma2 <= 0\)) s
5 269 M
(        sigma2 = sigma1;) s
5 247 M
(    // D\303\251tection automatique de la taille du noyau \303\240 partir de sigma) s
5 236 M
(    if \(ksize.width <= 0 && sigma1 > 0\)) s
5 225 M
(        ksize.width = cvRound\(sigma1 * \(depth == CV_8U ? 3 : 4\) * 2 + 1\) | 1;) s
5 214 M
(    if \(ksize.height <= 0 && sigma2 > 0\)) s
5 203 M
(        ksize.height = cvRound\(sigma2 * \(depth == CV_8U ? 3 : 4\) * 2 + 1\) | 1;) s
5 181 M
(    CV_Assert\(ksize.width > 0 && ksize.width % 2 == 1 &&) s
5 170 M
(              ksize.height > 0 && ksize.height % 2 == 1\);) s
5 148 M
(    sigma1 = max\(sigma1, 0.\);) s
5 137 M
(    sigma2 = max\(sigma2, 0.\);) s
5 115 M
(    // Obtenir les noyaux gaussiens) s
5 104 M
(    Mat kx = cv::getGaussianKernel\(ksize.width, sigma1, CV_32F\);) s
5 93 M
(    Mat ky;) s
5 82 M
(    if \(ksize.height == ksize.width && abs\(sigma1 - sigma2\) < DBL_EPSILON\)) s
5 71 M
(        ky = kx;) s
5 60 M
(    else) s
5 49 M
(        ky = cv::getGaussianKernel\(ksize.height, sigma2, CV_32F\);) s
5 27 M
(    // Appliquer la convolution s\303\251par\303\251e) s
5 16 M
(    Mat temp;) s
5 5 M
(    sepFilter2D\(src, temp, -1, kx, ky, cv::Point\(-1, -1\), 0, borderType\);) s
_R
S
%%Page: (5) 18
%%BeginPageSetup
_S
18 36 translate
/pagenum 5 def
/fname (imageproccessing.cpp) def
/fdir (.) def
/ftail (imageproccessing.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:39 2025) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(    dst = temp;) s
5 731 M
(}) s
5 709 M
(/**) s
5 698 M
( * @brief Convertit une image en niveaux de gris.) s
5 687 M
( * ) s
5 676 M
( * Cette fonction effectue la conversion d'une image en niveaux de gris en fonction du nomb) s
5 665 M
(re de canaux de l'image d'entr\303\251e.) s
5 654 M
( * Si l'image a 4 canaux \(BGRA\), l'alpha est ignor\303\251. Si l'image a 2 canaux, elle est d'abo) s
5 643 M
(rd dupliqu\303\251e pour cr\303\251er une image \303\240 3 canaux.) s
5 632 M
( * Si l'image est d\303\251j\303\240 en niveaux de gris \(1 canal\), elle est renvoy\303\251e sans modification) s
5 621 M
(.) s
5 610 M
( *) s
5 599 M
( * @param inputImage L'image d'entr\303\251e \303\240 convertir en niveaux de gris.) s
5 588 M
( * ) s
5 577 M
( * @return Mat L'image convertie en niveaux de gris, de type `CV_8U` avec un seul canal.) s
5 566 M
( * ) s
5 555 M
( * @throws runtime_error Si le nombre de canaux de l'image n'est pas pris en charge pour la) s
5 544 M
( conversion.) s
5 533 M
( * ) s
5 522 M
( * @note Cette fonction prend en charge les images ayant 1, 2, 3 ou 4 canaux. Si l'image a ) s
5 511 M
(2 canaux, ceux-ci sont fusionn\303\251s) s
5 500 M
( *       pour cr\303\251er une image \303\240 3 canaux avant la conversion en niveaux de gris.) s
5 489 M
( * ) s
5 478 M
( * @warning Cette fonction suppose que l'image d'entr\303\251e est dans l'un des formats suivants) s
5 467 M
( :) s
5 456 M
( *          - 4 canaux \(BGRA\) : L'alpha est ignor\303\251.) s
5 445 M
( *          - 3 canaux \(BGR\) : Conversion directe en niveaux de gris.) s
5 434 M
( *          - 2 canaux : Fusion des deux canaux en une image \303\240 3 canaux avant conversion.) s
5 423 M
( *          - 1 canal \(Grayscale\) : Aucune conversion n\303\251cessaire.) s
5 412 M
( */) s
5 401 M
(Mat ImageProccessing::toGrayScale\(const Mat& inputImage\) {) s
5 379 M
(    qDebug\(\) << "D\303\251but de la conversion en niveaux de gris.";) s
5 368 M
(    qDebug\(\) << "Taille de l'image d'entr\303\251e:" << inputImage.cols << "x" << inputImage.rows) s
5 357 M
(;) s
5 346 M
(    qDebug\(\) << "Nombre de canaux de l'image d'entr\303\251e:" << inputImage.channels\(\);) s
5 335 M
(    qDebug\(\) << "Type de l'image d'entr\303\251e:" << inputImage.type\(\);) s
5 313 M
(    Mat grayImage;) s
5 291 M
(    if \(inputImage.channels\(\) == 4\) {) s
5 280 M
(        qDebug\(\) << "Conversion de BGRA en BGR en supprimant le canal alpha.";) s
5 269 M
(        Mat bgrImage;) s
5 258 M
(        cvtColor\(inputImage, bgrImage, COLOR_BGRA2BGR\);) s
5 247 M
(        qDebug\(\) << "Conversion de BGR en niveaux de gris.";) s
5 236 M
(        cvtColor\(bgrImage, grayImage, COLOR_BGR2GRAY\);) s
5 225 M
(    } else if \(inputImage.channels\(\) == 3\) {) s
5 214 M
(        qDebug\(\) << "Conversion de BGR en niveaux de gris.";) s
5 203 M
(        cvtColor\(inputImage, grayImage, COLOR_BGR2GRAY\);) s
5 192 M
(    } else if \(inputImage.channels\(\) == 2\) {) s
5 181 M
(        qDebug\(\) << "Conversion d'une image \303\240 2 canaux en niveaux de gris.";) s
5 170 M
(    ) s
5 159 M
(        Mat mergedChannels;) s
5 148 M
(        merge\(vector<Mat>{inputImage, inputImage}, mergedChannels\);  // Exemple : dupliquer) s
5 137 M
( pour cr\303\251er une image 3 canaux) s
5 126 M
(        cvtColor\(mergedChannels, grayImage, COLOR_BGR2GRAY\);) s
5 115 M
(    } else if \(inputImage.channels\(\) == 1\) {) s
5 104 M
(        qDebug\(\) << "L'image est d\303\251j\303\240 en niveaux de gris.";) s
5 93 M
(        grayImage = inputImage.clone\(\);) s
5 82 M
(    } else {) s
5 71 M
(        throw runtime_error\("Nombre de canaux non support\303\251 pour la conversion en niveaux d) s
5 60 M
(e gris."\);) s
5 49 M
(    }) s
5 27 M
(    qDebug\(\) << "Valeur du pixel \303\240 \(0, 0\) dans l'image en niveaux de gris:" << grayImage.a) s
5 16 M
(t<uchar>\(0, 0\);) s
_R
S
%%Page: (6) 19
%%BeginPageSetup
_S
18 36 translate
/pagenum 6 def
/fname (imageproccessing.cpp) def
/fdir (.) def
/ftail (imageproccessing.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:39 2025) def
/pagenumstr (6) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(    qDebug\(\) << "Conversion en niveaux de gris termin\303\251e avec succ\303\250s.";) s
5 720 M
(    return grayImage;) s
5 709 M
(}) s
5 687 M
(/**) s
5 676 M
( * @brief Applique un filtre m\303\251dian personnalis\303\251 sur une image \(grayscale ou couleur\).) s
5 665 M
( * ) s
5 654 M
( * Cette fonction applique un filtre m\303\251dian sur l'image d'entr\303\251e. Le filtre m\303\251dian rempl) s
5 643 M
(ace chaque pixel par la m\303\251diane) s
5 632 M
( * des pixels voisins dans une fen\303\252tre de taille `kernelSize`. Si l'image est en niveaux d) s
5 621 M
(e gris, le filtre est appliqu\303\251) s
5 610 M
( * directement sur l'image. Si l'image est en couleur, le filtre est appliqu\303\251 s\303\251par\303\251ment) s
5 599 M
( sur chaque canal \(R, G, B\).) s
5 588 M
( * ) s
5 577 M
( * @param inputImage L'image d'entr\303\251e \303\240 laquelle le filtre m\303\251dian sera appliqu\303\251. Elle p) s
5 566 M
(eut \303\252tre en niveaux de gris ou en couleur.) s
5 555 M
( * @param kernelSize La taille du noyau du filtre m\303\251dian. Ce param\303\250tre doit \303\252tre un nomb) s
5 544 M
(re impair et sup\303\251rieur ou \303\251gal \303\240 3.) s
5 533 M
( * ) s
5 522 M
( * @return Mat L'image filtr\303\251e apr\303\250s application du filtre m\303\251dian.) s
5 511 M
( * ) s
5 500 M
( * @throws std::invalid_argument Si `kernelSize` est un nombre pair ou inf\303\251rieur \303\240 3.) s
5 489 M
( * @throws std::runtime_error Si l'image d'entr\303\251e est vide.) s
5 478 M
( * ) s
5 467 M
( * @note Le filtre m\303\251dian est appliqu\303\251 s\303\251par\303\251ment pour chaque pixel en fonction de ses ) s
5 456 M
(voisins dans un voisinage d\303\251fini par `kernelSize`.) s
5 445 M
( *       Les bords de l'image sont g\303\251r\303\251s en utilisant la fonction `clamp` pour \303\251viter l') s
5 434 M
(acc\303\250s \303\240 des pixels en dehors de l'image.) s
5 423 M
( * ) s
5 412 M
( * @warning Cette fonction fonctionne \303\240 la fois pour des images en niveaux de gris \(1 cana) s
5 401 M
(l\) et en couleur \(3 canaux\).) s
5 390 M
( */) s
5 379 M
(Mat ImageProccessing::applyCustomMedianFilter\(const Mat& inputImage, int kernelSize\) {) s
5 357 M
(    if \(kernelSize % 2 == 0 || kernelSize < 3\) {) s
5 346 M
(        throw invalid_argument\("La taille du noyau doit \303\252tre un nombre impair et >= 3"\);) s
5 335 M
(    }) s
5 313 M
(      // V\303\251rifier si l'image est vide) s
5 302 M
(    if \(inputImage.empty\(\)\) {) s
5 291 M
(        throw runtime_error\("L'image d'entr\303\251e est vide. Impossible d'appliquer le filtre.") s
5 280 M
(\);) s
5 269 M
(    }) s
5 247 M
(    if \(inputImage.channels\(\) == 1\) {) s
5 236 M
(        // Initialiser l'image de sortie avec la m\303\252me taille et le m\303\252me type) s
5 225 M
(        Mat filteredImage = Mat::zeros\(inputImage.size\(\), CV_8UC1\);) s
5 203 M
(        int halfKernel = kernelSize / 2;) s
5 181 M
(        // Appliquer le filtre m\303\251dian) s
5 170 M
(        for \(int y = 0; y < inputImage.rows; ++y\) {) s
5 159 M
(            for \(int x = 0; x < inputImage.cols; ++x\) {) s
5 148 M
(                vector<uchar> neighborhood;) s
5 126 M
(                for \(int dy = -halfKernel; dy <= halfKernel; ++dy\) {) s
5 115 M
(                    for \(int dx = -halfKernel; dx <= halfKernel; ++dx\) {) s
5 104 M
(                        int ny = clamp\(y + dy, 0, inputImage.rows - 1\);) s
5 93 M
(                        int nx = clamp\(x + dx, 0, inputImage.cols - 1\);) s
5 82 M
(                        neighborhood.push_back\(inputImage.at<uchar>\(ny, nx\)\);) s
5 71 M
(                    }) s
5 60 M
(                }) s
5 38 M
(                // Trier les valeurs du voisinage et s\303\251lectionner la m\303\251diane) s
5 27 M
(                sort\(neighborhood.begin\(\), neighborhood.end\(\)\);) s
5 16 M
(                filteredImage.at<uchar>\(y, x\) = neighborhood[neighborhood.size\(\) / 2];) s
5 5 M
(            }) s
_R
S
%%Page: (7) 20
%%BeginPageSetup
_S
18 36 translate
/pagenum 7 def
/fname (imageproccessing.cpp) def
/fdir (.) def
/ftail (imageproccessing.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:39 2025) def
/pagenumstr (7) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        }) s
5 720 M
(        return filteredImage;) s
5 709 M
(    }) s
5 687 M
(    // Initialiser les canaux de sortie) s
5 676 M
(    vector<Mat> channels;) s
5 665 M
(    split\(inputImage, channels\); // Diviser l'image couleur en 3 canaux \(B, G, R\)) s
5 643 M
(    // Appliquer le filtre m\303\251dian personnalis\303\251 sur chaque canal) s
5 632 M
(    for \(size_t i = 0; i < channels.size\(\); ++i\) {) s
5 621 M
(        Mat filteredChannel = Mat::zeros\(channels[i].size\(\), CV_8UC1\);) s
5 599 M
(        int halfKernel = kernelSize / 2;) s
5 588 M
(        for \(int y = 0; y < channels[i].rows; ++y\) {) s
5 577 M
(            for \(int x = 0; x < channels[i].cols; ++x\) {) s
5 566 M
(                vector<uchar> neighborhood;) s
5 544 M
(                for \(int dy = -halfKernel; dy <= halfKernel; ++dy\) {) s
5 533 M
(                    for \(int dx = -halfKernel; dx <= halfKernel; ++dx\) {) s
5 522 M
(                        int ny = clamp\(y + dy, 0, channels[i].rows - 1\);) s
5 511 M
(                        int nx = clamp\(x + dx, 0, channels[i].cols - 1\);) s
5 500 M
(                        neighborhood.push_back\(channels[i].at<uchar>\(ny, nx\)\);) s
5 489 M
(                    }) s
5 478 M
(                }) s
5 456 M
(                sort\(neighborhood.begin\(\), neighborhood.end\(\)\);) s
5 445 M
(                filteredChannel.at<uchar>\(y, x\) = neighborhood[neighborhood.size\(\) / 2];) s
5 434 M
(            }) s
5 423 M
(        }) s
5 401 M
(        // Remplacer le canal par le r\303\251sultat filtr\303\251) s
5 390 M
(        channels[i] = filteredChannel.clone\(\);) s
5 379 M
(    }) s
5 357 M
(    // Combiner les canaux filtr\303\251s pour recr\303\251er l'image couleur) s
5 346 M
(    Mat filteredImage;) s
5 335 M
(    merge\(channels, filteredImage\);) s
5 313 M
(    return filteredImage;) s
5 302 M
(}) s
5 280 M
(/**) s
5 269 M
( * @brief Applique la d\303\251tection des contours en utilisant l'op\303\251rateur Sobel.) s
5 258 M
( * ) s
5 247 M
( * Cette fonction utilise les noyaux de Sobel pour d\303\251tecter les contours dans une image en) s
5 236 M
( calculant les gradients dans les directions horizontale et verticale. Ensuite, elle combin) s
5 225 M
(e ces gradients pour obtenir la magnitude des contours, r\303\251sultant en une image binaire rep) s
5 214 M
(r\303\251sentant les bords d\303\251tect\303\251s.) s
5 203 M
( * ) s
5 192 M
( * @param image L'image d'entr\303\251e en niveaux de gris \(de type `CV_8UC1`\) sur laquelle la d\303) s
5 181 M
(\251tection des contours sera effectu\303\251e.) s
5 170 M
( * @return Mat L'image r\303\251sultante contenant les contours d\303\251tect\303\251s. Elle est de m\303\252me tai) s
5 159 M
(lle que l'image d'entr\303\251e et est de type `CV_8UC1`.) s
5 148 M
( * ) s
5 137 M
( * @note L'op\303\251rateur Sobel est utilis\303\251 pour calculer les d\303\251riv\303\251es de l'intensit\303\251 dans ) s
5 126 M
(les directions horizontale et verticale, puis ces d\303\251riv\303\251es sont combin\303\251es pour calculer ) s
5 115 M
(la magnitude des gradients.) s
5 104 M
( * @note L'image r\303\251sultante est une image en niveaux de gris o\303\271 les pixels blancs \(valeur) s
5 93 M
( proche de 255\) repr\303\251sentent les contours d\303\251tect\303\251s et les pixels noirs \(valeur proche de) s
5 82 M
( 0\) repr\303\251sentent les zones sans contours.) s
5 71 M
( * ) s
5 60 M
( * @warning Cette fonction suppose que l'image d'entr\303\251e est en niveaux de gris \(1 canal\). ) s
5 49 M
(Si l'image est en couleur ou a plus de 1 canal, un pr\303\251traitement est n\303\251cessaire.) s
5 38 M
( */) s
5 27 M
(Mat ImageProccessing::applyEdgeDetection\(const Mat& Inputimage\) {) s
5 16 M
(    ) s
5 5 M
(    if \(Inputimage.empty\(\)\) {) s
_R
S
%%Page: (8) 21
%%BeginPageSetup
_S
18 36 translate
/pagenum 8 def
/fname (imageproccessing.cpp) def
/fdir (.) def
/ftail (imageproccessing.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:39 2025) def
/pagenumstr (8) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        throw runtime_error\("L'image d'entr\303\251e est vide. Impossible d'appliquer le traiteme) s
5 731 M
(nt."\);) s
5 720 M
(    }) s
5 698 M
(    Mat grayImage = toGrayScale\(Inputimage\);) s
5 676 M
(    qDebug\(\) << "Type de l'image apr\303\250s conversion en niveaux de gris:" << grayImage.type\(\)) s
5 665 M
(;) s
5 654 M
(    qDebug\(\) << "Taille de l'image: largeur =" << grayImage.size\(\).width << ", hauteur =" <) s
5 643 M
(< grayImage.size\(\).height;) s
5 621 M
(    // D\303\251finir les noyaux de Sobel) s
5 610 M
(    vector<vector<float>> sobelX = {) s
5 599 M
(        {-1, 0, 1},) s
5 588 M
(        {-2, 0, 2},) s
5 577 M
(        {-1, 0, 1}) s
5 566 M
(    };) s
5 544 M
(    vector<vector<float>> sobelY = {) s
5 533 M
(        {-1, -2, -1},) s
5 522 M
(        { 0,  0,  0},) s
5 511 M
(        { 1,  2,  1}) s
5 500 M
(    };) s
5 478 M
(    // Calculer les gradients en X et Y) s
5 467 M
(    Mat gradX = convolution\(sobelX, grayImage\);) s
5 456 M
(    Mat gradY = convolution\(sobelY, grayImage\);) s
5 434 M
(    // Calculer la magnitude du gradient) s
5 423 M
(    Mat edges = Mat::zeros\(grayImage.size\(\), CV_8UC1\);) s
5 412 M
(    for \(int y = 0; y < grayImage.rows; ++y\) {) s
5 401 M
(        for \(int x = 0; x < grayImage.cols; ++x\) {) s
5 390 M
(            float gx = gradX.at<float>\(y, x\); // Acc\303\251der en tant que float) s
5 379 M
(            float gy = gradY.at<float>\(y, x\); // Acc\303\251der en tant que float) s
5 368 M
(            float magnitude = sqrt\(gx * gx + gy * gy\);) s
5 346 M
(            // Normaliser les valeurs entre [0, 255]) s
5 335 M
(            edges.at<uchar>\(y, x\) = static_cast<uchar>\(clamp\(magnitude, 0.0f, 255.0f\)\);) s
5 324 M
(        }) s
5 313 M
(    }) s
5 291 M
(    qDebug\(\) << "D\303\251tection des contours termin\303\251e avec succ\303\250s.";) s
5 269 M
(    return edges;) s
5 258 M
(}) s
5 236 M
(/**) s
5 225 M
( * @brief Applique un seuillage simple sur une image en niveaux de gris.) s
5 214 M
( *) s
5 203 M
( * Cette fonction prend une image en entr\303\251e, la convertit en niveaux de gris si elle est e) s
5 192 M
(n couleur,) s
5 181 M
( * puis applique un seuillage simple pour cr\303\251er une image binaire. Tous les pixels ayant u) s
5 170 M
(ne intensit\303\251) s
5 159 M
( * sup\303\251rieure \303\240 la valeur seuil sont d\303\251finis comme blancs \(255\), tandis que les autres s) s
5 148 M
(ont d\303\251finis comme noirs \(0\).) s
5 137 M
( * ) s
5 126 M
( * @param inputImage L'image d'entr\303\251e \(peut \303\252tre en couleur ou en niveaux de gris\).) s
5 115 M
( * ) s
5 104 M
( * @return Mat L'image binaire r\303\251sultante apr\303\250s application du seuillage.) s
5 93 M
( *) s
5 82 M
( * @note Si l'image d'entr\303\251e est en couleur, elle est convertie en niveaux de gris avant d) s
5 71 M
('appliquer le seuillage.) s
5 60 M
( *       La valeur de seuil est fix\303\251e \303\240 128 dans cette impl\303\251mentation.) s
5 49 M
( */) s
5 38 M
(Mat ImageProccessing::applyThreshold\(const Mat& inputImage, int thresholdValue\) {) s
5 27 M
(   ) s
5 16 M
(    // Convertir l'image en niveaux de gris si elle est en couleur) s
5 5 M
(    Mat grayImage;) s
_R
S
%%Page: (9) 22
%%BeginPageSetup
_S
18 36 translate
/pagenum 9 def
/fname (imageproccessing.cpp) def
/fdir (.) def
/ftail (imageproccessing.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:39 2025) def
/pagenumstr (9) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(    if \(inputImage.channels\(\) > 1\) {) s
5 720 M
(        grayImage = toGrayScale\(inputImage\);) s
5 709 M
(    } else {) s
5 698 M
(        grayImage = inputImage;) s
5 687 M
(    }) s
5 665 M
(    // Cr\303\251er une image binaire pour stocker le r\303\251sultat du seuillage) s
5 654 M
(    Mat binaryImage = Mat::zeros\(grayImage.size\(\), CV_8UC1\);) s
5 632 M
(    // Appliquer le seuillage) s
5 621 M
(    for \(int y = 0; y < grayImage.rows; y++\) {) s
5 610 M
(        for \(int x = 0; x < grayImage.cols; x++\) {) s
5 599 M
(            // Obtenir l'intensit\303\251 du pixel) s
5 588 M
(            uchar pixelValue = grayImage.at<uchar>\(y, x\);) s
5 566 M
(            // Appliquer le seuil) s
5 555 M
(            if \(pixelValue > thresholdValue\) {) s
5 544 M
(                binaryImage.at<uchar>\(y, x\) = 255; // Pixel blanc \(objet\)) s
5 533 M
(            } else {) s
5 522 M
(                binaryImage.at<uchar>\(y, x\) = 0;   // Pixel noir \(fond\)) s
5 511 M
(            }) s
5 500 M
(        }) s
5 489 M
(    }) s
5 467 M
(    qDebug\(\) << "Seuillage termin\303\251 avec succ\303\250s.";) s
5 445 M
(    return binaryImage;) s
5 434 M
(}) s
5 412 M
(/**) s
5 401 M
( * @brief Calcule l'histogramme d'une image et retourne l'image de l'histogramme.) s
5 390 M
( * ) s
5 379 M
( * Cette fonction effectue les \303\251tapes suivantes :) s
5 368 M
( * - Conversion de l'image en niveaux de gris si l'image est en couleur \(RGB\).) s
5 357 M
( * - Calcul de l'histogramme des intensit\303\251s de pixels.) s
5 346 M
( * - Normalisation de l'histogramme pour le redimensionner \303\240 une taille d'image sp\303\251cifi\303\251) s
5 335 M
(e.) s
5 324 M
( * - Dessin de l'histogramme normalis\303\251 sur une image de fond blanc.) s
5 313 M
( * ) s
5 302 M
( * @param inputImage L'image d'entr\303\251e pour laquelle l'histogramme doit \303\252tre calcul\303\251. Ell) s
5 291 M
(e peut \303\252tre en couleur ou en niveaux de gris.) s
5 280 M
( * @return Mat L'image repr\303\251sentant l'histogramme normalis\303\251 de l'image d'entr\303\251e.) s
5 269 M
( * ) s
5 258 M
( * @note Cette fonction fonctionne uniquement avec des images en niveaux de gris ou en coul) s
5 247 M
(eur \(3 canaux\). ) s
5 236 M
( * Si l'image est en couleur, elle sera convertie en niveaux de gris avant le calcul de l'h) s
5 225 M
(istogramme.) s
5 214 M
( * ) s
5 203 M
( * @warning L'image d'entr\303\251e doit \303\252tre une image valide, sinon un comportement ind\303\251fini ) s
5 192 M
(pourrait se produire.) s
5 181 M
( */) s
5 170 M
(Mat ImageProccessing::calculateHistogram\(const Mat& inputImage\) {) s
5 159 M
(    // \303\\211tape 1 : Conversion en niveaux de gris si n\303\251cessaire) s
5 148 M
(    Mat grayImage;) s
5 137 M
(    if \(inputImage.channels\(\) > 1\) {) s
5 126 M
(        cvtColor\(inputImage, grayImage, COLOR_BGR2GRAY\);) s
5 115 M
(    } else {) s
5 104 M
(        grayImage = inputImage.clone\(\);) s
5 93 M
(    }) s
5 71 M
(    // \303\\211tape 2 : Initialiser un tableau pour l'histogramme \(256 bins\)) s
5 60 M
(    int histSize = 256;) s
5 49 M
(    vector<int> histogram\(histSize, 0\);) s
5 27 M
(    // \303\\211tape 3 : Parcourir l'image pour remplir l'histogramme) s
5 16 M
(    for \(int y = 0; y < grayImage.rows; y++\) {) s
5 5 M
(        for \(int x = 0; x < grayImage.cols; x++\) {) s
_R
S
%%Page: (10) 23
%%BeginPageSetup
_S
18 36 translate
/pagenum 10 def
/fname (imageproccessing.cpp) def
/fdir (.) def
/ftail (imageproccessing.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:39 2025) def
/pagenumstr (10) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(            int pixelValue = grayImage.at<uchar>\(y, x\);) s
5 731 M
(            histogram[pixelValue]++;) s
5 720 M
(        }) s
5 709 M
(    }) s
5 687 M
(    // \303\\211tape 4 : Normalisation de l'histogramme pour le redimensionner \303\240 l'image) s
5 676 M
(    int maxVal = *max_element\(histogram.begin\(\), histogram.end\(\)\);) s
5 654 M
(    if \(maxVal == 0\) {) s
5 643 M
(        return Mat\(\); // Retourner une image vide en cas de probl\303\250me) s
5 632 M
(    }) s
5 610 M
(    int histWidth = 512, histHeight = 400;) s
5 599 M
(    Mat histImage\(histHeight + 50, histWidth + 50, CV_8UC3, Scalar\(255, 255, 255\)\); // Fond) s
5 588 M
( blanc) s
5 566 M
(    // Normalisation pour que les valeurs soient entre 0 et histHeight) s
5 555 M
(    for \(int i = 0; i < histSize; i++\) {) s
5 544 M
(        histogram[i] = \(\(double\)histogram[i] / maxVal\) * histHeight;) s
5 533 M
(    }) s
5 511 M
(    // \303\\211tape 5 : Dessin de l'histogramme) s
5 500 M
(    int binWidth = cvRound\(\(double\)histWidth / histSize\);) s
5 489 M
(    Scalar barColor = Scalar\(50, 50, 150\); // Bleu fonc\303\251 pour les barres) s
5 478 M
(    for \(int i = 0; i < histSize; i++\) {) s
5 467 M
(        rectangle\(histImage,) s
5 456 M
(                  Point\(25 + binWidth * i, histHeight + 25\),) s
5 445 M
(                  Point\(25 + binWidth * \(i + 1\), histHeight + 25 - histogram[i]\),) s
5 434 M
(                  barColor, FILLED\);) s
5 423 M
(    }) s
5 401 M
(    // Ajouter les axes) s
5 390 M
(    line\(histImage, Point\(25, 25\), Point\(25, histHeight + 25\), Scalar\(0, 0, 0\), 2\); // Axe ) s
5 379 M
(vertical) s
5 368 M
(    line\(histImage, Point\(25, histHeight + 25\), Point\(histWidth + 25, histHeight + 25\), Sca) s
5 357 M
(lar\(0, 0, 0\), 2\); // Axe horizontal) s
5 335 M
(    // Ajouter des annotations pour les axes) s
5 324 M
(    putText\(histImage, "Intensite", Point\(histWidth / 2, histHeight + 45\), FONT_HERSHEY_SIM) s
5 313 M
(PLEX, 0.6, Scalar\(0, 0, 0\), 1\);) s
5 302 M
(    putText\(histImage, "0", Point\(20, histHeight + 30\), FONT_HERSHEY_SIMPLEX, 0.5, Scalar\(0) s
5 291 M
(, 0, 0\), 1\);) s
5 280 M
(    putText\(histImage, "255", Point\(histWidth, histHeight + 30\), FONT_HERSHEY_SIMPLEX, 0.5,) s
5 269 M
( Scalar\(0, 0, 0\), 1\);) s
5 247 M
(    // Ajouter des valeurs sur l'axe des ordonn\303\251es \(par exemple : 0, max/2, max\)) s
5 236 M
(    putText\(histImage, "0", Point\(5, histHeight + 25\), FONT_HERSHEY_SIMPLEX, 0.5, Scalar\(0,) s
5 225 M
( 0, 0\), 1\);) s
5 214 M
(    putText\(histImage, to_string\(maxVal / 2\), Point\(5, \(histHeight + 25\) / 2\), FONT_HERSHEY) s
5 203 M
(_SIMPLEX, 0.5, Scalar\(0, 0, 0\), 1\);) s
5 192 M
(    putText\(histImage, to_string\(maxVal\), Point\(5, 25\), FONT_HERSHEY_SIMPLEX, 0.5, Scalar\(0) s
5 181 M
(, 0, 0\), 1\);) s
5 159 M
(    return histImage;) s
5 148 M
(}) s
5 126 M
(/**) s
5 115 M
( * @brief Applique l'algorithme SIFT \(Scale-Invariant Feature Transform\) pour d\303\251tecter des) s
5 104 M
( points-cl\303\251s ) s
5 93 M
( *        et descripteurs d'une image.) s
5 82 M
( * ) s
5 71 M
( * Cette fonction impl\303\251mente SIFT, un algorithme robuste utilis\303\251 pour d\303\251tecter des carac) s
5 60 M
(t\303\251ristiques) s
5 49 M
( * distinctives dans une image, m\303\252me sous des variations d'\303\251chelle, de rotation et d'illu) s
5 38 M
(mination.) s
5 27 M
( * ) s
5 16 M
( * ### Fonctionnement :) s
5 5 M
( * - Convertit l'image en niveaux de gris \(si n\303\251cessaire\) pour simplifier le traitement.) s
_R
S
%%Page: (11) 24
%%BeginPageSetup
_S
18 36 translate
/pagenum 11 def
/fname (imageproccessing.cpp) def
/fdir (.) def
/ftail (imageproccessing.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:39 2025) def
/pagenumstr (11) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( * - D\303\251tecte des points-cl\303\251s dans l'image, qui correspondent \303\240 des r\303\251gions d'int\303\251r\303\252t ) s
5 731 M
(importantes.) s
5 720 M
( * - G\303\251n\303\250re des descripteurs pour chaque point-cl\303\251, repr\303\251sentant les caract\303\251ristiques ) s
5 709 M
(locales.) s
5 698 M
( * - Superpose les points-cl\303\251s d\303\251tect\303\251s sur l'image d'entr\303\251e pour visualiser les r\303\251sul) s
5 687 M
(tats.) s
5 676 M
( * ) s
5 665 M
( * ### Utilisations :) s
5 654 M
( * - Correspondance d'images \(image matching\).) s
5 643 M
( * - Suivi d'objets \(object tracking\).) s
5 632 M
( * - Reconstruction 3D bas\303\251e sur des images.) s
5 621 M
( * - Classification et reconnaissance d'objets.) s
5 610 M
( * ) s
5 599 M
( * @param inputImage L'image d'entr\303\251e pour laquelle les points-cl\303\251s et descripteurs seron) s
5 588 M
(t calcul\303\251s.) s
5 577 M
( *                   Elle peut \303\252tre en couleur ou en niveaux de gris.) s
5 566 M
( * @return cv::Mat Une copie de l'image d'entr\303\251e avec les points-cl\303\251s superpos\303\251s en vert) s
5 555 M
(.) s
5 544 M
( * @throws std::invalid_argument Si l'image d'entr\303\251e est vide.) s
5 533 M
( * ) s
5 522 M
( * @note Cette impl\303\251mentation utilise la classe `cv::SIFT` fournie par OpenCV.) s
5 511 M
( * ) s
5 500 M
( * ### Exemple d'utilisation :) s
5 489 M
( * @code) s
5 478 M
( * cv::Mat image = cv::imread\("exemple.jpg"\); // Charger une image) s
5 467 M
( * ImageProcessing processor;) s
5 456 M
( * cv::Mat resultat = processor.appliquerSIFT\(image\);) s
5 445 M
( * cv::imshow\("R\303\251sultat SIFT", resultat\); // Afficher l'image avec les points-cl\303\251s) s
5 434 M
( * cv::waitKey\(0\);) s
5 423 M
( * @endcode) s
5 412 M
( */) s
5 401 M
(Mat ImageProccessing::applySIFT\(const Mat& inputImage\) {) s
5 390 M
(    // Conversion en niveaux de gris \(si n\303\251cessaire\)) s
5 379 M
(    Mat imageGris;) s
5 368 M
(    if \(inputImage.channels\(\) == 3\)) s
5 357 M
(        cvtColor\(inputImage, imageGris, COLOR_BGR2GRAY\);) s
5 346 M
(    else) s
5 335 M
(        imageGris = inputImage;) s
5 313 M
(    // D\303\251tecter les points-cl\303\251s et les descripteurs avec SIFT) s
5 302 M
(    Ptr<SIFT> sift = SIFT::create\(\);) s
5 291 M
(    vector<KeyPoint> pointsCles;) s
5 280 M
(    Mat descripteurs;) s
5 258 M
(    sift->detectAndCompute\(imageGris, noArray\(\), pointsCles, descripteurs\);) s
5 236 M
(    // Dessiner les points-cl\303\251s sur l'image) s
5 225 M
(    Mat imageResultat;) s
5 214 M
(    drawKeypoints\(inputImage, pointsCles, imageResultat, Scalar\(0, 255, 0\)\);) s
5 192 M
(    return imageResultat;) s
5 181 M
(}) s
5 159 M
(/**) s
5 148 M
( * @brief Applique l'op\303\251ration d'\303\251rosion sur une image en niveaux de gris.) s
5 137 M
( * ) s
5 126 M
( * L'\303\251rosion est une op\303\251ration morphologique qui remplace chaque pixel par la valeur mini) s
5 115 M
(male de ses voisins) s
5 104 M
( * dans un voisinage d\303\251fini par un noyau de taille `kernelSize`. Cette fonction applique l) s
5 93 M
('\303\251rosion \303\240 une image) s
5 82 M
( * en niveaux de gris. Si l'image d'entr\303\251e est en couleur, elle est d'abord convertie en n) s
5 71 M
(iveaux de gris.) s
5 60 M
( * ) s
5 49 M
( * @param inputImage L'image d'entr\303\251e sur laquelle l'\303\251rosion sera appliqu\303\251e. Elle peut \303) s
5 38 M
(\252tre en couleur ou en niveaux de gris.) s
5 27 M
( * @param kernelSize La taille du noyau d'\303\251rosion. Ce param\303\250tre doit \303\252tre un entier impa) s
5 16 M
(ir et sup\303\251rieur \303\240 z\303\251ro.) s
5 5 M
( * ) s
_R
S
%%Page: (12) 25
%%BeginPageSetup
_S
18 36 translate
/pagenum 12 def
/fname (imageproccessing.cpp) def
/fdir (.) def
/ftail (imageproccessing.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:39 2025) def
/pagenumstr (12) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( * @return Mat L'image r\303\251sultante apr\303\250s application de l'\303\251rosion.) s
5 731 M
( * ) s
5 720 M
( * @throws std::invalid_argument Si `kernelSize` n'est pas un entier positif impair.) s
5 709 M
( * ) s
5 698 M
( * @note L'\303\251rosion est effectu\303\251e en parcourant chaque pixel de l'image et en rempla\303\247ant ) s
5 687 M
(sa valeur par la valeur) s
5 676 M
( *       minimale de ses voisins dans un voisinage de taille `kernelSize`. Les bords de l'i) s
5 665 M
(mage sont trait\303\251s) s
5 654 M
( *       en ajoutant des bordures r\303\251fl\303\251chissantes pour \303\251viter les artefacts.) s
5 643 M
( * ) s
5 632 M
( * @warning Cette fonction suppose que l'image est en niveaux de gris ou qu'elle peut \303\252tre) s
5 621 M
( convertie en niveaux de gris.) s
5 610 M
( */) s
5 599 M
(Mat ImageProccessing::applyErosion\(const Mat& inputImage, int kernelSize\) {) s
5 588 M
(    // V\303\251rification : la taille du noyau doit \303\252tre impaire et sup\303\251rieure \303\240 z\303\251ro) s
5 577 M
(    if \(kernelSize <= 0 || kernelSize % 2 == 0\) {) s
5 566 M
(        throw invalid_argument\("La taille du noyau doit \303\252tre un entier positif impair."\);) s
5 555 M
(    }) s
5 533 M
(    // V\303\251rifier si l'image est en niveaux de gris) s
5 522 M
(    Mat grayImage;) s
5 511 M
(    if \(inputImage.channels\(\) > 1\) {) s
5 500 M
(        cvtColor\(inputImage, grayImage, COLOR_BGR2GRAY\);) s
5 489 M
(    } else {) s
5 478 M
(        grayImage = inputImage.clone\(\);) s
5 467 M
(    }) s
5 445 M
(    // Ajouter des bordures pour \303\251viter les artefacts sur les bords) s
5 434 M
(    int offset = kernelSize / 2;) s
5 423 M
(    Mat paddedImage;) s
5 412 M
(    copyMakeBorder\(grayImage, paddedImage, offset, offset, offset, offset, BORDER_REFLECT\);) s
5 390 M
(    // Cr\303\251er une image de sortie) s
5 379 M
(    Mat outputImage = Mat::zeros\(grayImage.size\(\), CV_8U\);) s
5 357 M
(    // Appliquer l'\303\251rosion manuelle) s
5 346 M
(    for \(int i = offset; i < paddedImage.rows - offset; i++\) {) s
5 335 M
(        for \(int j = offset; j < paddedImage.cols - offset; j++\) {) s
5 324 M
(            int minVal = 255;) s
5 302 M
(            // Parcourir le noyau structurant) s
5 291 M
(            for \(int ki = -offset; ki <= offset; ki++\) {) s
5 280 M
(                for \(int kj = -offset; kj <= offset; kj++\) {) s
5 269 M
(                    minVal = min\(minVal, \(int\)paddedImage.at<uchar>\(i + ki, j + kj\)\);) s
5 258 M
(                }) s
5 247 M
(            }) s
5 225 M
(            outputImage.at<uchar>\(i - offset, j - offset\) = minVal;) s
5 214 M
(        }) s
5 203 M
(    }) s
5 181 M
(    return outputImage;) s
5 170 M
(}) s
5 148 M
(Mat hardcodedGaussianKernel\(\) {) s
5 137 M
(    return \(Mat_<float>\(3, 3\) <<) s
5 126 M
(                0.0751136, 0.123841, 0.0751136,) s
5 115 M
(            0.123841,  0.204180, 0.123841,) s
5 104 M
(            0.0751136, 0.123841, 0.0751136) s
5 93 M
(            \);) s
5 82 M
(}) s
5 60 M
(/**) s
5 49 M
( * @brief Applique un flou gaussien sur une image \303\240 un seul canal \303\240 l'aide d'un noyau de ) s
5 38 M
(convolution.) s
5 27 M
( * ) s
5 16 M
( * Cette fonction applique un flou gaussien sur une image en utilisant un noyau de convolut) s
5 5 M
(ion sp\303\251cifi\303\251. ) s
_R
S
%%Page: (13) 26
%%BeginPageSetup
_S
18 36 translate
/pagenum 13 def
/fname (imageproccessing.cpp) def
/fdir (.) def
/ftail (imageproccessing.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:39 2025) def
/pagenumstr (13) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( * Le flou gaussien est une op\303\251ration de filtrage qui remplace chaque pixel de l'image par) s
5 731 M
( une moyenne pond\303\251r\303\251e ) s
5 720 M
( * de ses voisins, avec des poids donn\303\251s par le noyau gaussien. La fonction est appliqu\303\251e) s
5 709 M
( sur une image \303\240 un seul canal ) s
5 698 M
( * \(par exemple une image en niveaux de gris\).) s
5 687 M
( * ) s
5 676 M
( * @param src L'image d'entr\303\251e \303\240 un seul canal \(par exemple en niveaux de gris\) sur laque) s
5 665 M
(lle le flou gaussien sera appliqu\303\251.) s
5 654 M
( * @param dst L'image de sortie dans laquelle l'image flout\303\251e sera stock\303\251e.) s
5 643 M
( * @param kernel Le noyau de convolution \303\240 appliquer pour le flou gaussien. Le noyau doit ) s
5 632 M
(\303\252tre une matrice de type `float` de dimensions impaires.) s
5 621 M
( * ) s
5 610 M
( * @return void Cette fonction ne renvoie rien. Le r\303\251sultat est stock\303\251 dans l'image de so) s
5 599 M
(rtie `dst`.) s
5 588 M
( * ) s
5 577 M
( * @note Cette fonction effectue la convolution de l'image `src` avec le noyau sp\303\251cifi\303\251. ) s
5 566 M
(Elle utilise un format \303\240 virgule flottante) s
5 555 M
( *       pour les calculs interm\303\251diaires afin d'\303\251viter la perte de pr\303\251cision, puis norma) s
5 544 M
(lise et convertit le r\303\251sultat final) s
5 533 M
( *       dans l'\303\251chelle des valeurs d'intensit\303\251 [0, 255].) s
5 522 M
( * ) s
5 511 M
( * @warning L'image d'entr\303\251e `src` doit \303\252tre une image \303\240 un seul canal, et le noyau `ker) s
5 500 M
(nel` doit \303\252tre de taille impair.) s
5 489 M
( */) s
5 478 M
(void GaussianBlurSingleChannel\(const Mat& src, Mat& dst, const Mat& kernel\) {) s
5 467 M
(    int kernelRadius = kernel.rows / 2;) s
5 445 M
(    // Cr\303\251er une image interm\303\251diaire pour le r\303\251sultat) s
5 434 M
(    Mat temp = Mat::zeros\(src.size\(\), CV_32F\); // Utiliser float pour les calculs interm\303\251d) s
5 423 M
(iaires) s
5 401 M
(    // Effectuer la convolution) s
5 390 M
(    for \(int y = 0; y < src.rows; y++\) {) s
5 379 M
(        for \(int x = 0; x < src.cols; x++\) {) s
5 368 M
(            float sum = 0.0;) s
5 346 M
(            for \(int j = -kernelRadius; j <= kernelRadius; j++\) {) s
5 335 M
(                for \(int i = -kernelRadius; i <= kernelRadius; i++\) {) s
5 324 M
(                    int nx = clamp\(x + i, 0, src.cols - 1\); // G\303\251rer les bords) s
5 313 M
(                    int ny = clamp\(y + j, 0, src.rows - 1\);) s
5 302 M
(                    sum += src.at<uchar>\(ny, nx\) * kernel.at<float>\(j + kernelRadius, i + k) s
5 291 M
(ernelRadius\);) s
5 280 M
(                }) s
5 269 M
(            }) s
5 258 M
(            temp.at<float>\(y, x\) = sum; // Stocker le r\303\251sultat en tant que float) s
5 247 M
(        }) s
5 236 M
(    }) s
5 214 M
(    // Normaliser et reconvertir en format 8 bits) s
5 203 M
(    normalize\(temp, temp, 0, 255, NORM_MINMAX\); // Normaliser le r\303\251sultat dans l'intervall) s
5 192 M
(e [0, 255]) s
5 181 M
(    temp.convertTo\(dst, CV_8UC1\); // Convertir en 8 bits unsigned char) s
5 170 M
(}) s
5 148 M
(/**) s
5 137 M
( * @brief Applique un flou gaussien \303\240 une image \303\240 plusieurs canaux \(couleur ou niveau de ) s
5 126 M
(gris\).) s
5 115 M
( * ) s
5 104 M
( * Cette fonction applique un flou gaussien \303\240 une image en utilisant un noyau de convoluti) s
5 93 M
(on gaussienne. Elle peut) s
5 82 M
( * traiter des images en niveaux de gris \(1 canal\) ou en couleur \(3 canaux\). Pour une image) s
5 71 M
( couleur, le flou gaussien) s
5 60 M
( * est appliqu\303\251 ind\303\251pendamment \303\240 chaque canal \(R, G, B\) de l'image. Si l'image est en ni) s
5 49 M
(veaux de gris, le flou est appliqu\303\251) s
5 38 M
( * directement sur l'image \303\240 un seul canal.) s
5 27 M
( * ) s
5 16 M
( * @param src L'image d'entr\303\251e \(en couleur ou en niveaux de gris\) \303\240 laquelle le flou gaus) s
5 5 M
(sien sera appliqu\303\251.) s
_R
S
%%Page: (14) 27
%%BeginPageSetup
_S
18 36 translate
/pagenum 14 def
/fname (imageproccessing.cpp) def
/fdir (.) def
/ftail (imageproccessing.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:39 2025) def
/pagenumstr (14) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( * @param dst L'image de sortie dans laquelle l'image flout\303\251e sera stock\303\251e.) s
5 731 M
( * ) s
5 720 M
( * @return void Cette fonction ne renvoie rien. Le r\303\251sultat est stock\303\251 dans l'image `dst`) s
5 709 M
(.) s
5 698 M
( * ) s
5 687 M
( * @throws std::runtime_error Si l'image d'entr\303\251e `src` n'a pas 1 ou 3 canaux.) s
5 676 M
( * ) s
5 665 M
( * @note La fonction applique le flou gaussien \303\240 chaque canal de l'image individuellement ) s
5 654 M
(si l'image est en couleur,) s
5 643 M
( *       ou directement sur l'image si elle est en niveaux de gris. Un noyau de convolution) s
5 632 M
( gaussienne durcod\303\251 est utilis\303\251) s
5 621 M
( *       pour le flou. Apr\303\250s application du filtre, les canaux sont recombin\303\251s pour resta) s
5 610 M
(urer l'image en couleur \(si applicable\).) s
5 599 M
( * ) s
5 588 M
( * @warning L'image d'entr\303\251e doit \303\252tre une image \303\240 1 ou 3 canaux. Si l'image d'entr\303\251e a) s
5 577 M
( un nombre de canaux diff\303\251rent, une exception sera lev\303\251e.) s
5 566 M
( */) s
5 555 M
(void GaussianBlurMultiChannel\(const cv::Mat& src, cv::Mat& dst\) {) s
5 544 M
(    // Valider le type d'entr\303\251e \(image en niveaux de gris ou en couleur\)) s
5 533 M
(    if \(src.channels\(\) != 3 && src.channels\(\) != 1\) {) s
5 522 M
(        throw runtime_error\("L'image d'entr\303\251e doit \303\252tre une image \303\240 3 canaux \(couleur\) o) s
5 511 M
(u 1 canal \(niveaux de gris\)."\);) s
5 500 M
(    }) s
5 478 M
(    // Obtenir le noyau gaussien durcod\303\251) s
5 467 M
(    Mat kernel = hardcodedGaussianKernel\(\);) s
5 445 M
(    if\(src.channels\(\) == 3\){) s
5 434 M
(        // Diviser l'image en ses canaux individuels) s
5 423 M
(        vector<cv::Mat> channels;) s
5 412 M
(        split\(src, channels\);) s
5 390 M
(        // Appliquer le flou gaussien \303\240 chaque canal) s
5 379 M
(        for \(int i = 0; i < channels.size\(\); ++i\) {) s
5 368 M
(            cv::Mat temp;) s
5 357 M
(            GaussianBlurSingleChannel\(channels[i], temp, kernel\); // Appliquer le filtre \303\240) s
5 346 M
( chaque canal) s
5 335 M
(            channels[i] = temp; // Stocker le r\303\251sultat dans le vecteur de canaux) s
5 324 M
(        }) s
5 313 M
(        merge\(channels, dst\);) s
5 302 M
(    }) s
5 291 M
(    if\(src.channels\(\) == 1\){) s
5 280 M
(        Mat temp;) s
5 269 M
(        GaussianBlurSingleChannel\(src, temp, kernel\);) s
5 258 M
(        merge\(temp, dst\);) s
5 247 M
(    }) s
5 236 M
(}) s
5 214 M
(/**) s
5 203 M
( * @brief Applique un filtre gaussien \303\240 une image d'entr\303\251e.) s
5 192 M
( * ) s
5 181 M
( * Cette fonction applique un filtre gaussien \303\240 l'image d'entr\303\251e en utilisant la fonction) s
5 170 M
( `GaussianBlurMultiChannel`.) s
5 159 M
( * Le filtre est appliqu\303\251 pour lisser l'image, r\303\251duire le bruit ou produire un effet de f) s
5 148 M
(lou. La fonction v\303\251rifie d'abord) s
5 137 M
( * que l'image d'entr\303\251e n'est pas vide avant d'appliquer le filtre.) s
5 126 M
( * ) s
5 115 M
( * @param inputImage L'image d'entr\303\251e sur laquelle le filtre gaussien sera appliqu\303\251. Cett) s
5 104 M
(e image peut \303\252tre en niveaux de gris) s
5 93 M
( *                   ou en couleur \(avec 1 ou 3 canaux\).) s
5 82 M
( * ) s
5 71 M
( * @return Mat L'image de sortie apr\303\250s application du filtre gaussien.) s
5 60 M
( * ) s
5 49 M
( * @throws std::runtime_error Si l'image d'entr\303\251e est vide.) s
5 38 M
( * ) s
5 27 M
( * @note Cette fonction utilise la m\303\251thode `GaussianBlurMultiChannel` pour appliquer le fi) s
5 16 M
(ltre gaussien. Elle supporte \303\240 la fois) s
5 5 M
( *       les images en niveaux de gris et en couleur.) s
_R
S
%%Page: (15) 28
%%BeginPageSetup
_S
18 36 translate
/pagenum 15 def
/fname (imageproccessing.cpp) def
/fdir (.) def
/ftail (imageproccessing.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:39 2025) def
/pagenumstr (15) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
( * ) s
5 731 M
( * @warning L'image d'entr\303\251e ne doit pas \303\252tre vide.) s
5 720 M
( */) s
5 709 M
(Mat ImageProccessing::applyGaussianFilter\(const Mat& inputImage\) {) s
5 698 M
(    // Valider l'image d'entr\303\251e) s
5 687 M
(    if \(inputImage.empty\(\)\) {) s
5 676 M
(        throw runtime_error\("L'image d'entr\303\251e est vide. Impossible d'appliquer le filtre g) s
5 665 M
(aussien."\);) s
5 654 M
(    }) s
5 632 M
(    // Initialiser l'image de sortie) s
5 621 M
(    Mat outputImage;) s
5 599 M
(    // Appliquer le flou gaussien en utilisant l'impl\303\251mentation personnalis\303\251e) s
5 588 M
(    GaussianBlurMultiChannel\(inputImage, outputImage\);) s
5 566 M
(    return outputImage;) s
5 555 M
(}) s
_R
S
%%Page: (1) 29
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (librarymanagement.cpp) def
/fdir (.) def
/ftail (librarymanagement.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:28:32 2025) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(#include "librarymanagement.hpp") s
5 731 M
(#include "descriptor.hpp") s
5 720 M
(#include <QDebug>) s
5 709 M
(#include <QFile>) s
5 698 M
(#include <QJsonDocument>) s
5 687 M
(#include <QJsonObject>) s
5 676 M
(#include <QJsonArray>) s
5 665 M
(#include <QIODevice>) s
5 654 M
(#include <QTextStream>) s
5 643 M
(#include <QJsonObject>) s
5 632 M
(#include <QInputDialog>) s
5 621 M
(#include <QMessageBox>) s
5 610 M
(#include <QPushButton>) s
5 599 M
(#include <QVBoxLayout>) s
5 588 M
(#include <QLabel>) s
5 577 M
(#include <QCoreApplication>) s
5 566 M
(#include <QDir>) s
5 544 M
(ManageLibrary::ManageLibrary\(int acces, Descriptor* head,QString libraryPath\): acces\(acces\)) s
5 533 M
(, head\(head\) , libraryPath\(libraryPath\) {};) s
5 511 M
(Descriptor* ManageLibrary::getDescriptor\(unsigned int idDesc\) const {) s
5 500 M
(    Descriptor* current = head;) s
5 478 M
(    while\(current != nullptr\) {) s
5 467 M
(        if\(current->getIdDescriptor\(\) == idDesc\){) s
5 456 M
(            return current;) s
5 445 M
(        }) s
5 434 M
(        current = current->getNextDescriptor\(\);) s
5 423 M
(    }) s
5 401 M
(    //cout << "Error: Descriptor with ID" << idDesc << "not found." << endl ;) s
5 390 M
(    return nullptr;) s
5 379 M
(}) s
5 357 M
(int ManageLibrary::getAcces\(\) const {return this->acces;}) s
5 335 M
(void ManageLibrary::addDescriptor\(\) const {) s
5 313 M
(}) s
5 291 M
(void ManageLibrary::deleteDescriptor\(\) const {}) s
5 269 M
(Descriptor* ManageLibrary::searchDescriptor\(unsigned int id\) const {) s
5 247 M
(    Descriptor* current = head;) s
5 225 M
(    while\(current != nullptr\) {) s
5 214 M
(        if\(current->getIdDescriptor\(\) == id\){) s
5 203 M
(            return current;) s
5 192 M
(        }) s
5 181 M
(        current = current->getNextDescriptor\(\);) s
5 170 M
(    }) s
5 148 M
(    //cout << "Error: Image with ID" << id << "not found." <<endl ;) s
5 137 M
(    return nullptr;) s
5 115 M
(}) s
5 93 M
(int ManageLibrary::totalDescriptors\(\) const {) s
5 71 M
(    int count = 0;) s
5 60 M
(    Descriptor* current = head;) s
5 49 M
(    while\(current != nullptr\){) s
5 38 M
(        ++count;) s
5 27 M
(        current = current->getNextDescriptor\(\);) s
5 16 M
(    }) s
_R
S
%%Page: (2) 30
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (librarymanagement.cpp) def
/fdir (.) def
/ftail (librarymanagement.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:28:32 2025) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(    return count;) s
5 731 M
(}) s
5 709 M
(double ManageLibrary::displayCost\(unsigned int id\) const {) s
5 687 M
(    Descriptor* current = head;) s
5 665 M
(    while\(current != nullptr\) {) s
5 654 M
(        if\(current->getIdDescriptor\(\) == id\){) s
5 643 M
(            return current->getCost\(\);) s
5 632 M
(        }) s
5 621 M
(        current = current->getNextDescriptor\(\);) s
5 610 M
(    }) s
5 588 M
(    // cout << "Error: Image with ID" << id << "not found." <<endl ;) s
5 577 M
(    return -1.0;) s
5 555 M
(}) s
5 533 M
(Descriptor* ManageLibrary::getHead\(\) const {) s
5 522 M
(    return head;) s
5 511 M
(}) s
5 500 M
(void ManageLibrary::display\(\) const {) s
5 478 M
(    Descriptor* current = this->getHead\(\);) s
5 467 M
(    int i = 1;) s
5 445 M
(    qDebug\(\) << "Displaying ... ";) s
5 434 M
(    while\(current != nullptr\){) s
5 423 M
(        qDebug\(\) << "Desc = " << i;) s
5 412 M
(        current->display\(\);) s
5 401 M
(        current = current->getNextDescriptor\(\);) s
5 390 M
(        i++;) s
5 379 M
(    }) s
5 346 M
(}) s
5 324 M
(double ManageLibrary::getMaxDescriptorCost\(\) {) s
5 313 M
(    double maxCost = 0.0;) s
5 302 M
(    Descriptor* current = this->getHead\(\);) s
5 291 M
(    while \(current != nullptr\) {) s
5 280 M
(        if \(current->getCost\(\) > maxCost\) {) s
5 269 M
(            maxCost = current->getCost\(\);) s
5 258 M
(        }) s
5 247 M
(        current = current->getNextDescriptor\(\);) s
5 236 M
(    }) s
5 225 M
(    return maxCost;) s
5 214 M
(}) s
5 192 M
(double ManageLibrary::getMinDescriptorCost\(\) {) s
5 181 M
(    double minCost = INFINITY;) s
5 170 M
(    Descriptor* current = this->getHead\(\);) s
5 159 M
(    while \(current != nullptr\) {) s
5 148 M
(        if \(current->getCost\(\) < minCost\) {) s
5 137 M
(            minCost = current->getCost\(\);) s
5 126 M
(        }) s
5 115 M
(        current = current->getNextDescriptor\(\);) s
5 104 M
(    }) s
5 93 M
(    return minCost;) s
5 82 M
(}) s
5 60 M
(void ManageLibrary::deleteDescriptor\(Descriptor* descriptorToDelete\) {) s
5 49 M
(    if \(!descriptorToDelete\) {) s
5 38 M
(        qDebug\(\) << "The descriptor to delete is null. Operation aborted.";) s
5 27 M
(        return;) s
5 16 M
(    }) s
_R
S
%%Page: (3) 31
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (librarymanagement.cpp) def
/fdir (.) def
/ftail (librarymanagement.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:28:32 2025) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(    qDebug\(\) << "Deleting descriptor: " << descriptorToDelete->getIdDescriptor\(\);) s
5 720 M
(    QFile file\(libraryPath\);) s
5 709 M
(    if \(!file.open\(QIODevice::ReadOnly\)\) {) s
5 698 M
(        qDebug\(\) << "Error: Could not open file";) s
5 687 M
(        return;) s
5 676 M
(    }) s
5 665 M
(    QString appPath = QCoreApplication::applicationDirPath\(\);) s
5 643 M
(    // Read the existing JSON file) s
5 632 M
(    QByteArray data = file.readAll\(\);) s
5 621 M
(    file.close\(\);) s
5 610 M
(    QJsonDocument doc\(QJsonDocument::fromJson\(data\)\);) s
5 599 M
(    QJsonObject obj = doc.object\(\);) s
5 588 M
(    QJsonArray array = obj["library"].toArray\(\);) s
5 577 M
(    QJsonArray newArray;) s
5 555 M
(    QString imagePathToDelete;) s
5 544 M
(    for \(int i = 0; i < array.size\(\); i++\) {) s
5 533 M
(        QJsonObject obj = array[i].toObject\(\);) s
5 522 M
(        if \(obj["id"].toInt\(\) != descriptorToDelete->getIdDescriptor\(\)\) {) s
5 511 M
(            newArray.append\(obj\);) s
5 500 M
(        } else {) s
5 489 M
(            imagePathToDelete = appPath +  obj["Imagepath"].toString\(\);) s
5 478 M
(        }) s
5 467 M
(    }) s
5 456 M
(    obj["library"] = newArray;) s
5 434 M
(    if \(!file.open\(QIODevice::WriteOnly\)\) {) s
5 423 M
(        qDebug\(\) << "Error: Could not open file";) s
5 412 M
(        return;) s
5 401 M
(    }) s
5 390 M
(    file.write\(QJsonDocument\(obj\).toJson\(\)\);) s
5 379 M
(    file.close\(\);) s
5 357 M
(    // Delete the image file associated with the descriptor) s
5 346 M
(    if \(!imagePathToDelete.isEmpty\(\)\) {) s
5 335 M
(        QFile imageFile\(imagePathToDelete\);) s
5 324 M
(        if \(imageFile.exists\(\)\) {) s
5 313 M
(            if \(!imageFile.remove\(\)\) {) s
5 302 M
(                qDebug\(\) << "Error: Could not delete image file";) s
5 291 M
(            } else {) s
5 280 M
(                qDebug\(\) << "Image file deleted successfully";) s
5 269 M
(            }) s
5 258 M
(        } else {) s
5 247 M
(            qDebug\(\) << "Image file does not exist";) s
5 236 M
(        }) s
5 225 M
(    }) s
5 203 M
(    // Remove the descriptor from the in-memory library object) s
5 192 M
(    Descriptor* current = head;) s
5 181 M
(    Descriptor* previous = nullptr;) s
5 159 M
(    while \(current != nullptr\) {) s
5 148 M
(        if \(current->getIdDescriptor\(\) == descriptorToDelete->getIdDescriptor\(\)\) {) s
5 137 M
(            if \(previous == nullptr\) {) s
5 126 M
(                // The descriptor to delete is the head of the list) s
5 115 M
(                head = current->getNextDescriptor\(\);) s
5 104 M
(            } else {) s
5 93 M
(                previous->setNextDescriptor\(current->getNextDescriptor\(\)\);) s
5 82 M
(            }) s
5 71 M
(            delete current;) s
5 60 M
(            qDebug\(\) << "Descriptor removed from in-memory library";) s
5 49 M
(            return;) s
5 38 M
(        }) s
5 27 M
(        previous = current;) s
5 16 M
(        current = current->getNextDescriptor\(\);) s
5 5 M
(    }) s
_R
S
%%Page: (4) 32
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (librarymanagement.cpp) def
/fdir (.) def
/ftail (librarymanagement.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:28:32 2025) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(    qDebug\(\) << "Descriptor not found in in-memory library";) s
5 720 M
(}) s
5 698 M
(ManageLibrary ManageLibrary::orderDescriptorsByCostDescending\(\) {) s
5 687 M
(    // Create a new library to hold the ordered descriptors) s
5 676 M
(    ManageLibrary orderedLibrary = ManageLibrary\(0, nullptr,""\);) s
5 654 M
(    // Traverse the current library and insert each descriptor into the new library in sort) s
5 643 M
(ed order) s
5 632 M
(    Descriptor* current = head;) s
5 621 M
(    while \(current != nullptr\) {) s
5 610 M
(        Descriptor* next = current->getNextDescriptor\(\);) s
5 599 M
(        insertDescriptorInOrder\(orderedLibrary, current\);) s
5 588 M
(        current = next;) s
5 577 M
(    }) s
5 555 M
(    // Return the ordered library) s
5 544 M
(    return orderedLibrary;) s
5 533 M
(}) s
5 500 M
(// Helper function to insert a descriptor into the new library in sorted order) s
5 489 M
(void ManageLibrary::insertDescriptorInOrder\(ManageLibrary& library, Descriptor* descriptor\)) s
5 478 M
( {) s
5 467 M
(    if \(library.head == nullptr || library.head->getCost\(\) < descriptor->getCost\(\)\) {) s
5 456 M
(        // Insert at the beginning) s
5 445 M
(        descriptor->setNextDescriptor\(library.head\);) s
5 434 M
(        library.head = descriptor;) s
5 423 M
(    } else {) s
5 412 M
(        // Traverse the library to find the correct position) s
5 401 M
(        Descriptor* current = library.head;) s
5 390 M
(        while \(current->getNextDescriptor\(\) != nullptr && current->getNextDescriptor\(\)->get) s
5 379 M
(Cost\(\) >= descriptor->getCost\(\)\) {) s
5 368 M
(            current = current->getNextDescriptor\(\);) s
5 357 M
(        }) s
5 346 M
(        descriptor->setNextDescriptor\(current->getNextDescriptor\(\)\);) s
5 335 M
(        current->setNextDescriptor\(descriptor\);) s
5 324 M
(    }) s
5 313 M
(}) s
5 302 M
(ManageLibrary ManageLibrary::orderDescriptorsByCostAscending\(\) {) s
5 291 M
(    // Create a new library to hold the ordered descriptors) s
5 280 M
(    ManageLibrary orderedLibrary = ManageLibrary\(0, nullptr,""\);) s
5 258 M
(    // Traverse the current library and insert each descriptor into the new library in sort) s
5 247 M
(ed order) s
5 236 M
(    Descriptor* current = head;) s
5 225 M
(    while \(current != nullptr\) {) s
5 214 M
(        Descriptor* next = current->getNextDescriptor\(\);) s
5 203 M
(        insertDescriptorInOrderAscending\(orderedLibrary, current\);) s
5 192 M
(        current = next;) s
5 181 M
(    }) s
5 159 M
(    // Return the ordered library) s
5 148 M
(    return orderedLibrary;) s
5 137 M
(}) s
5 115 M
(// Helper function to insert a descriptor into the new library in ascending order) s
5 104 M
(void ManageLibrary::insertDescriptorInOrderAscending\(ManageLibrary& library, Descriptor* de) s
5 93 M
(scriptor\) {) s
5 82 M
(    if \(library.head == nullptr || library.head->getCost\(\) > descriptor->getCost\(\)\) {) s
5 71 M
(        // Insert at the beginning) s
5 60 M
(        descriptor->setNextDescriptor\(library.head\);) s
5 49 M
(        library.head = descriptor;) s
5 38 M
(    } else {) s
5 27 M
(        // Traverse the library to find the correct position) s
5 16 M
(        Descriptor* current = library.head;) s
5 5 M
(        while \(current->getNextDescriptor\(\) != nullptr && current->getNextDescriptor\(\)->get) s
_R
S
%%Page: (5) 33
%%BeginPageSetup
_S
18 36 translate
/pagenum 5 def
/fname (librarymanagement.cpp) def
/fdir (.) def
/ftail (librarymanagement.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:28:32 2025) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(Cost\(\) <= descriptor->getCost\(\)\) {) s
5 731 M
(            current = current->getNextDescriptor\(\);) s
5 720 M
(        }) s
5 709 M
(        descriptor->setNextDescriptor\(current->getNextDescriptor\(\)\);) s
5 698 M
(        current->setNextDescriptor\(descriptor\);) s
5 687 M
(    }) s
5 676 M
(}) s
5 654 M
(void ManageLibrary::setHead\(Descriptor* head\) {) s
5 643 M
(    this->head = head;) s
5 632 M
(}) s
5 610 M
(Descriptor* ManageLibrary::getDescriptorsByMaxCost\(double maxCost\) {) s
5 599 M
(    Descriptor* filteredHead = nullptr;) s
5 588 M
(    Descriptor* filteredTail = nullptr;) s
5 577 M
(    Descriptor* current = head;) s
5 555 M
(    qDebug\(\) << "Filtering descriptors by max cost:" << maxCost;) s
5 533 M
(    while \(current != nullptr\) {) s
5 522 M
(        if \(current->getCost\(\) <= maxCost\) {) s
5 511 M
(            Descriptor* newDescriptor = new Descriptor\(*current\); // Create a deep copy) s
5 500 M
(            newDescriptor->setNextDescriptor\(nullptr\); // Ensure it's isolated) s
5 478 M
(            if \(filteredHead == nullptr\) {) s
5 467 M
(                filteredHead = newDescriptor;) s
5 456 M
(                filteredTail = newDescriptor;) s
5 445 M
(            } else {) s
5 434 M
(                filteredTail->setNextDescriptor\(newDescriptor\);) s
5 423 M
(                filteredTail = newDescriptor;) s
5 412 M
(            }) s
5 401 M
(        }) s
5 390 M
(        current = current->getNextDescriptor\(\);) s
5 379 M
(    }) s
5 368 M
(    filteredTail->setNextDescriptor\(nullptr\);) s
5 346 M
(    qDebug\(\) << "Filtering complete. Returning filtered descriptors.";) s
5 335 M
(    return filteredHead;) s
5 324 M
(}) s
5 302 M
(QString ManageLibrary::getLibraryPath\(\) const {) s
5 291 M
(    return libraryPath;) s
5 280 M
(}) s
5 258 M
(void ManageLibrary::setLibraryPath\(QString path\) {) s
5 247 M
(    libraryPath = path;) s
5 236 M
(}) s
5 214 M
(void ManageLibrary::saveLibraryToJson\(QString libraryName\) {) s
5 203 M
(    // Create the root JSON array) s
5 192 M
(    QJsonArray libraryArray;) s
5 181 M
(    QString appPath = QCoreApplication::applicationDirPath\(\);) s
5 159 M
(    // Traverse the linked list of descriptors) s
5 148 M
(    Descriptor* current = head;) s
5 137 M
(    while \(current != nullptr\) {) s
5 126 M
(        QJsonObject descriptorObject;) s
5 104 M
(        // Add each property to the JSON object) s
5 93 M
(        descriptorObject["Imagepath"] = current->getImage\(\).getPath\(\); // Assuming Image cl) s
5 82 M
(ass has getImagePath\(\)) s
5 71 M
(        descriptorObject["access"] = QString\(current->getAccess\(\)\);         // Convert char) s
5 60 M
( to QString) s
5 49 M
(        descriptorObject["cost"] = current->getCost\(\);) s
5 38 M
(        descriptorObject["id"] = static_cast<int>\(current->getIdDescriptor\(\)\);) s
5 27 M
(        descriptorObject["source"] = current->getSource\(\);) s
5 16 M
(        descriptorObject["title"] = current->getTitle\(\);) s
5 5 M
(        ) s
_R
S
%%Page: (6) 34
%%BeginPageSetup
_S
18 36 translate
/pagenum 6 def
/fname (librarymanagement.cpp) def
/fdir (.) def
/ftail (librarymanagement.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:28:32 2025) def
/pagenumstr (6) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(        // Append the object to the array) s
5 720 M
(        libraryArray.append\(descriptorObject\);) s
5 698 M
(        // Move to the next descriptor) s
5 687 M
(        current = current->getNextDescriptor\(\);) s
5 676 M
(    }) s
5 654 M
(    // Create the root JSON object) s
5 643 M
(    QJsonObject rootObject;) s
5 632 M
(    rootObject["library"] = libraryArray;) s
5 610 M
(    // Convert to JSON document) s
5 599 M
(    QJsonDocument jsonDoc\(rootObject\);) s
5 577 M
(    // Write the JSON document to a file) s
5 566 M
(    QFile file\(appPath + "/../config/json_config/libraries.json" + libraryName + ".json"\);) s
5 555 M
(    if \(file.open\(QIODevice::WriteOnly\)\) {) s
5 544 M
(        file.write\(jsonDoc.toJson\(QJsonDocument::Indented\)\); // Indented for readability) s
5 533 M
(        file.close\(\);) s
5 522 M
(        qDebug\(\) << "Library saved to library.json";) s
5 511 M
(    } else {) s
5 500 M
(        qWarning\(\) << "Failed to save library: Unable to open file.";) s
5 489 M
(    }) s
5 478 M
(}) s
5 456 M
(Descriptor* ManageLibrary::getDescriptorsBetweenMaxMinCost\(double maxCost, double minCost\) ) s
5 445 M
({) s
5 434 M
(    Descriptor* current = head;) s
5 423 M
(    Descriptor* newHead = nullptr;) s
5 412 M
(    Descriptor* newTail = nullptr;) s
5 390 M
(    while \(current != nullptr\) {) s
5 379 M
(        // Filter descriptors by cost) s
5 368 M
(        if \(current->getCost\(\) >= minCost && current->getCost\(\) <= maxCost\) {) s
5 357 M
(            // Create a copy of the current descriptor) s
5 346 M
(            Descriptor* newDescriptor = new Descriptor\(*current\);) s
5 335 M
(            newDescriptor->setNextDescriptor\(nullptr\); // Ensure the new descriptor has no ) s
5 324 M
(connections) s
5 302 M
(            // Append the new descriptor to the new list) s
5 291 M
(            if \(newHead == nullptr\) {) s
5 280 M
(                newHead = newDescriptor;) s
5 269 M
(                newTail = newDescriptor;) s
5 258 M
(            } else {) s
5 247 M
(                newTail->setNextDescriptor\(newDescriptor\);) s
5 236 M
(                newTail = newDescriptor;) s
5 225 M
(            }) s
5 214 M
(        }) s
5 203 M
(        current = current->getNextDescriptor\(\);) s
5 192 M
(    }) s
5 170 M
(    return newHead;) s
5 159 M
(}) s
_R
S
%%Page: (1) 35
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (loginwindow.cpp) def
/fdir (.) def
/ftail (loginwindow.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:45 2025) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(#include "loginwindow.hpp") s
5 731 M
(#include "ui_loginwindow.h") s
5 720 M
(#include "user.hpp") s
5 709 M
(#include <QFile>) s
5 698 M
(#include <QTextStream>) s
5 687 M
(#include <QMessageBox>) s
5 676 M
(#include <QScreen>) s
5 665 M
(#include <QGuiApplication>) s
5 654 M
(#include <QJsonDocument>) s
5 643 M
(#include <QJsonObject>) s
5 621 M
(LoginWindow::LoginWindow\(User &user, QWidget *parent\)) s
5 610 M
(    : QDialog\(parent\), ui\(new Ui::LoginWindow\), user\(user\)) s
5 599 M
({) s
5 588 M
(    ui->setupUi\(this\);                                 // Configurer la fen\303\252tre) s
5 577 M
(    this->setFixedSize\(340 , 579\);                     // Correction de la fen\303\252tre de conn) s
5 566 M
(exion \(ne peut pas \303\252tre d\303\251plac\303\251e\)) s
5 555 M
(    QPixmap pixmap\(":/AppImages/Widget.png"\);          // Le chemin de l'image qui montre u) s
5 544 M
(ne personne en PNG dans la fen\303\252tre de connexion) s
5 522 M
(    // Appliquer des styles aux \303\251l\303\251ments de l'interface) s
5 511 M
(    ui->LoginButton->setStyleSheet\("background-color: #01042e; color: white; padding: 10px ) s
5 500 M
(15px; border: none; border-radius: 5px; font-size: 10px;"\);) s
5 489 M
(    ui->LoginInput->setStyleSheet\("padding: 10px; border: 1px solid #ccc; border-radius: 5p) s
5 478 M
(x;width: 300px; height: 80px;font-size: 10px;"\);) s
5 467 M
(    ui->label->setStyleSheet\("font-size: 22px; font-weight: bold; color: #01042e;"\);) s
5 456 M
(    // D\303\251finir le titre et la taille de la fen\303\252tre) s
5 445 M
(    setWindowTitle\("Login"\);) s
5 434 M
(    ui->label_2->setStyleSheet\(" color: #01042e;"\);    // Donner au texte "SIGN IN" une cou) s
5 423 M
(leur bleu fonc\303\251) s
5 412 M
(    // D\303\251finir l'image de fond pour le label) s
5 401 M
(    ui->backgroundImageLabel->setStyleSheet\("background-image: url\(:/AppImages/Back_g.jpg\);) s
5 390 M
( background-position: center; background-repeat: no-repeat; background-size: cover;"\);) s
5 379 M
(    ui->label_3->setPixmap\(pixmap\);                    // D\303\251finir l'image sur le QLabel) s
5 368 M
(    ui->label_3->setScaledContents\(true\);              // Faire en sorte que l'image soit r) s
5 357 M
(edimensionn\303\251e avec le label) s
5 346 M
(    ui->LoginInput->setEchoMode\(QLineEdit::Password\);  // Masquer le code) s
5 335 M
(    ui->LoginInput->setEchoMode\(QLineEdit::Password\);) s
5 313 M
(    ui->LoginButton->raise\(\);                          // Placer ce bouton au-dessus de la ) s
5 302 M
(fen\303\252tre) s
5 291 M
(    ui->LoginInput->raise\(\);                           // Placer ce bouton au-dessus de la ) s
5 280 M
(fen\303\252tre) s
5 269 M
(    ui->label->raise\(\);                                // Placer ce bouton au-dessus de la ) s
5 258 M
(fen\303\252tre) s
5 247 M
(}) s
5 225 M
(LoginWindow::~LoginWindow\(\)) s
5 214 M
({) s
5 203 M
(    delete ui;) s
5 192 M
(}) s
5 170 M
(void LoginWindow::on_LoginButton_clicked\(\)) s
5 159 M
({) s
5 137 M
(    QString filePath = QCoreApplication::applicationDirPath\(\) + "/auth.json"; // chemin ver) s
5 126 M
(s le fichier auth.json o\303\271 tous les codes sont stock\303\251s) s
5 104 M
(    QFile file\(filePath\);) s
5 93 M
(    if \(!file.open\(QIODevice::ReadOnly | QIODevice::Text\)\) {) s
5 71 M
(        QMessageBox::warning\(nullptr, "Error", "Unable to open file for Authentfication!"\);) s
5 60 M
(}                // Tester si le fichier peut \303\252tre ouvert) s
5 38 M
(    QString codeInput = ui->LoginInput->text\(\);                                            ) s
5 27 M
(         // ) s
5 16 M
(    QByteArray data = file.readAll\(\);) s
5 5 M
(    QJsonDocument doc\(QJsonDocument::fromJson\(data\)\);) s
_R
S
%%Page: (2) 36
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (loginwindow.cpp) def
/fdir (.) def
/ftail (loginwindow.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:45 2025) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(    QJsonObject obj = doc.object\(\);) s
5 731 M
(    QJsonArray array = obj["users"].toArray\(\);) s
5 698 M
(    int i\(0\);) s
5 687 M
(    bool isAuthenticated = false;  // Indicateur pour suivre l'\303\251tat de l'authentification) s
5 665 M
(    for \(int i = 0; i < array.size\(\); i++\) {) s
5 654 M
(        QJsonObject obj = array[i].toObject\(\);) s
5 632 M
(        if \(obj["code"] == codeInput\) {  // V\303\251rifier si codeInput correspond \303\240 obj["code") s
5 621 M
(]) s
5 610 M
(            isAuthenticated = true;  // Marquer comme authentifi\303\251) s
5 588 M
(            if \(obj["access"].toInt\(\) == 0\) {  // V\303\251rifier la valeur d'acc\303\250s) s
5 577 M
(                qDebug\(\) << "access  = " << obj["access"];) s
5 566 M
(                user.access = false;) s
5 555 M
(            } else {) s
5 544 M
(                qDebug\(\) << "access  = " << obj["access"];) s
5 533 M
(                user.access = true;) s
5 522 M
(            }) s
5 500 M
(            accept\(\);  // Proc\303\251der si authentifi\303\251) s
5 489 M
(            break;     // Quitter la boucle car nous avons trouv\303\251 une correspondance) s
5 478 M
(        }) s
5 467 M
(    }) s
5 445 M
(    // Si aucune correspondance n'a \303\251t\303\251 trouv\303\251e \(isAuthenticated est toujours false\)) s
5 434 M
(    if \(!isAuthenticated\) {) s
5 423 M
(        QMessageBox::warning\(this, "Login Failed", "You are Not Authenticated"\);  // Affich) s
5 412 M
(er un message si l'utilisateur n'est pas authentifi\303\251) s
5 401 M
(    }) s
5 379 M
(    // Effacer le texte dans le champ LoginInput apr\303\250s traitement) s
5 368 M
(    ui->LoginInput->clear\(\);                          // Effacer le texte apr\303\250s l'avoir ut) s
5 357 M
(ilis\303\251) s
5 346 M
(}) s
_R
S
%%Page: (1) 37
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (main.cpp) def
/fdir (.) def
/ftail (main.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:44 2025) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(#include "mainwindow.h") s
5 731 M
(#include "loginwindow.hpp") s
5 720 M
(#include "user.hpp") s
5 709 M
(#include <QApplication>) s
5 698 M
(#include <QLoggingCategory>) s
5 676 M
(int main\(int argc, char *argv[]\)) s
5 665 M
({) s
5 654 M
(    QApplication a\(argc, argv\);) s
5 643 M
(    QLoggingCategory::setFilterRules\("*.debug=false"\);) s
5 621 M
(    User user; // Create a User object) s
5 610 M
(    LoginWindow loginWindow\(user\); // Create the login window) s
5 588 M
(    // Loop until user logs in or cancels login) s
5 577 M
(    while \(true\) {) s
5 566 M
(        // Show the login window and check authentication) s
5 555 M
(        if \(loginWindow.exec\(\) == QDialog::Accepted\) {) s
5 544 M
(            // If login is successful, create the MainWindow with the user object) s
5 533 M
(            MainWindow mainWindow\(user\);) s
5 511 M
(            // Connect the logout signal from MainWindow to show the login window again) s
5 500 M
(            QObject::connect\(&mainWindow, &MainWindow::logoutRequested, [&]\(\) {) s
5 489 M
(                mainWindow.close\(\);  // Close the MainWindow) s
5 478 M
(                loginWindow.show\(\);  // Show the LoginWindow again) s
5 467 M
(            }\);) s
5 445 M
(            // Show the main window) s
5 434 M
(            mainWindow.show\(\);) s
5 412 M
(            // Run the application event loop for the MainWindow) s
5 401 M
(            a.exec\(\);) s
5 379 M
(            // After logout, reset the login window \(optional step to ensure no state persi) s
5 368 M
(sts\)) s
5 357 M
(            loginWindow.hide\(\); // Hide the LoginWindow \(to ensure it doesn't reappear in t) s
5 346 M
(he background\)) s
5 335 M
(        } else {) s
5 324 M
(            // If login fails or the user cancels, exit the application) s
5 313 M
(            return 0;) s
5 302 M
(        }) s
5 291 M
(    }) s
5 280 M
(}) s
_R
S
%%Page: (1) 38
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (mainwindow.cpp) def
/fdir (.) def
/ftail (mainwindow.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:43 2025) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(#include "mainwindow.h") s
5 731 M
(#include "loginwindow.hpp") s
5 720 M
(#include "./ui_mainwindow.h") s
5 709 M
(#include <QFileDialog>) s
5 698 M
(#include <QDebug>) s
5 687 M
(#include <QLabel>) s
5 676 M
(#include <QPixmap>) s
5 665 M
(#include <QVBoxLayout>) s
5 654 M
(#include <QFormLayout>) s
5 643 M
(#include <QDialogButtonBox>) s
5 632 M
(#include "librarymanagement.hpp") s
5 621 M
(#include "descriptor.hpp") s
5 610 M
(#include "add_new_descriptor.hpp") s
5 599 M
(#include <QJsonObject>) s
5 588 M
(#include <QInputDialog>) s
5 577 M
(#include <QMessageBox>) s
5 566 M
(#include <QPushButton>) s
5 555 M
(#include <QCoreApplication>) s
5 544 M
(#include <QJsonDocument>) s
5 500 M
(MainWindow::MainWindow\(User user, QWidget *parent, ManageLibrary mainlibrary, ManageLibrary) s
5 489 M
( sublibrary\)) s
5 478 M
(    : QMainWindow\(parent\), ui\(new Ui::Home\), currentUser\(user\), mainlibrary\(ManageLibrary\(0) s
5 467 M
(, nullptr, ""\)\), sublibrary\(ManageLibrary\(0, nullptr, ""\)\)) s
5 456 M
({) s
5 445 M
(    // this->setFixedSize\(1200, 800\); // Width: 1200, Height: 800) s
5 423 M
(    ui->setupUi\(this\);) s
5 412 M
(    // this->mainlibrary = ManageLibrary\(0, nullptr\);) s
5 390 M
(    descriptorDetails = new DescriptorDetails\(this, currentUser.access\);) s
5 379 M
(    if \(currentUser.access\)) s
5 368 M
(    {) s
5 357 M
(        ui->menubar->setVisible\(true\);) s
5 346 M
(    }) s
5 335 M
(    else) s
5 324 M
(    {) s
5 313 M
(        ui->menubar->setVisible\(false\);) s
5 302 M
(    }) s
5 280 M
(    // Initialize the grid layout) s
5 269 M
(    gridLayout = new QGridLayout\(\);) s
5 258 M
(    ui->librariesLayout->setLayout\(gridLayout\); ) s
5 247 M
(    loadLibrariesButtons\(\);) s
5 236 M
(    ui->LogoutButton->setVisible\(true\);) s
5 214 M
(    ui->returnButton->setVisible\(false\);) s
5 203 M
(    connect\(ui->returnButton, &QPushButton::clicked, this, &MainWindow::on_returnButton_cli) s
5 192 M
(cked\);) s
5 170 M
(    ui->saveSubListButton->setEnabled\(false\); // D\303\251sactive le bouton) s
5 148 M
(    // Apply styles to the specified UI elements) s
5 137 M
(    ui ->LogoutButton->setStyleSheet\("QPushButton {") s
5 126 M
(                                            "background-color: rgb\(153, 193, 241\);") s
5 115 M
(                                            "color: white;") s
5 104 M
(                                            "border: none;") s
5 93 M
(                                            "border-radius: 5px;") s
5 82 M
(                                            "padding: 8px 12px;") s
5 71 M
(                                            "font-size: 14px;") s
5 60 M
(                                            "font-weight: bold;") s
5 49 M
(                                            "}") s
5 38 M
(                                            "QPushButton:hover {") s
5 27 M
(                                            "background-color: rgb\(123, 163, 211\);") s
5 16 M
(                                            "}") s
5 5 M
(                                            "QPushButton:pressed {") s
_R
S
%%Page: (2) 39
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (mainwindow.cpp) def
/fdir (.) def
/ftail (mainwindow.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:43 2025) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(                                            "background-color: #003f7f;") s
5 731 M
(                                            "padding-left: 12px;") s
5 720 M
(                                            "padding-top: 12px;") s
5 709 M
(                                            "}"\);) s
5 698 M
(    ui->CreateSubListLabel->setStyleSheet\("font-size: 18px; font-weight: bold; color: #333;) s
5 687 M
("\);) s
5 676 M
(    ui->LoadLibraryLabel->setStyleSheet\("font-size: 18px; font-weight: bold; color: #333;"\)) s
5 665 M
(;) s
5 654 M
(    ui->ImageIdSearchInput->setStyleSheet\("padding: 10px; border: 1px solid #ccc; border-ra) s
5 643 M
(dius: 5px;"\);) s
5 632 M
(    ui->SearchButton->setStyleSheet\("QPushButton {") s
5 621 M
(                                            "background-color: rgb\(153, 193, 241\);") s
5 610 M
(                                            "color: white;") s
5 599 M
(                                            "border: none;") s
5 588 M
(                                            "border-radius: 5px;") s
5 577 M
(                                            "padding: 8px 12px;") s
5 566 M
(                                            "font-size: 14px;") s
5 555 M
(                                            "font-weight: bold;") s
5 544 M
(                                            "}") s
5 533 M
(                                            "QPushButton:hover {") s
5 522 M
(                                            "background-color: rgb\(123, 163, 211\);") s
5 511 M
(                                            "}") s
5 500 M
(                                            "QPushButton:pressed {") s
5 489 M
(                                            "background-color: #003f7f;") s
5 478 M
(                                            "padding-left: 12px;") s
5 467 M
(                                            "padding-top: 12px;") s
5 456 M
(                                            "}"\);) s
5 445 M
(    ui->comboBox_libraries->setStyleSheet\("padding: 5px; border: 1px solid #ccc; border-rad) s
5 434 M
(ius: 5px; background-color: #fff; color: #333;"\);) s
5 423 M
(    ui->ClearFilterButton->setVisible\(false\);) s
5 401 M
(    // Connect the combo box's currentIndexChanged signal to the slot) s
5 390 M
(    connect\(ui->comboBox_libraries, QOverload<int>::of\(&QComboBox::currentIndexChanged\), th) s
5 379 M
(is, [this]\(int index\)) s
5 368 M
(            {) s
5 357 M
(        QString libraryPath = ui->comboBox_libraries->itemData\(index\).toString\(\);) s
5 346 M
(        if \(!libraryPath.isEmpty\(\)\) {) s
5 335 M
(            LoadTheLibrary\(libraryPath\);) s
5 324 M
(        } }\);) s
5 313 M
(}) s
5 291 M
(MainWindow::~MainWindow\(\)) s
5 280 M
({) s
5 269 M
(    delete ui;) s
5 258 M
(}) s
5 236 M
(void MainWindow::loadLibrariesButtons\(\)) s
5 225 M
({) s
5 203 M
(    // Clear existing items from the combo box) s
5 192 M
(    ui->comboBox_libraries->clear\(\);) s
5 170 M
(    QString appPath = QCoreApplication::applicationDirPath\(\);) s
5 159 M
(    QString librariesFilePath = appPath + "/libraries.json";) s
5 137 M
(    // Load libraries from the JSON file) s
5 126 M
(    QJsonArray jsonArray = currentUser.loadLibraries\(librariesFilePath\);) s
5 115 M
(    if \(jsonArray.isEmpty\(\)\)) s
5 104 M
(    {) s
5 93 M
(        QMessageBox::warning\(this, "No Libraries Found",) s
5 82 M
(                             "No libraries could be loaded from libraries.json. Please chec) s
5 71 M
(k the file."\);) s
5 60 M
(        // qDebug\(\) << "No libraries found in the file.";) s
5 49 M
(        return; // Exit if there are no libraries) s
5 38 M
(    }) s
5 16 M
(    // qDebug\(\) << "Loaded libraries: ";) s
_R
S
%%Page: (3) 40
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (mainwindow.cpp) def
/fdir (.) def
/ftail (mainwindow.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:43 2025) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(    // Populate the combo box with library names and paths) s
5 731 M
(    for \(const QJsonValue &value : jsonArray\)) s
5 720 M
(    {) s
5 709 M
(        if \(!value.isObject\(\)\)) s
5 698 M
(            continue; // Skip non-object entries) s
5 676 M
(        QJsonObject libraryObj = value.toObject\(\);) s
5 665 M
(        QString libraryName = libraryObj.value\("name"\).toString\(\);) s
5 654 M
(        QString libraryPath = appPath + libraryObj.value\("path"\).toString\(\);) s
5 632 M
(        if \(libraryName.isEmpty\(\) || libraryPath.isEmpty\(\)\)) s
5 621 M
(        {) s
5 610 M
(            // qDebug\(\) << "Invalid library entry: " << libraryObj;) s
5 599 M
(            continue; // Skip invalid entries) s
5 588 M
(        }) s
5 566 M
(        ui->comboBox_libraries->addItem\(libraryName, libraryPath\);) s
5 555 M
(    }) s
5 533 M
(    if \(ui->comboBox_libraries->count\(\) > 0\)) s
5 522 M
(    {) s
5 511 M
(        QString libraryPath = ui->comboBox_libraries->itemData\(0\).toString\(\);) s
5 500 M
(        if \(!libraryPath.isEmpty\(\)\)) s
5 489 M
(        {) s
5 478 M
(            LoadTheLibrary\(libraryPath\); // Load the first library by default) s
5 467 M
(        }) s
5 456 M
(    }) s
5 445 M
(}) s
5 423 M
(void MainWindow::on_actionLoad_a_Library_triggered\(\)) s
5 412 M
({) s
5 401 M
(    // Enter the library to import) s
5 390 M
(    QString path = QFileDialog::getOpenFileName\(this, "Open Library", "", "JSON files \(*.js) s
5 379 M
(on\)"\);) s
5 368 M
(    // print the path in the terminal) s
5 357 M
(    // qDebug\(\) << path;) s
5 346 M
(    // show the library) s
5 335 M
(    LoadTheLibrary\(path\);) s
5 324 M
(}) s
5 302 M
(void MainWindow::setCurrentLibraryPath\(QString path\){) s
5 291 M
(    this->currentLibraryPath = path;) s
5 280 M
(}) s
5 258 M
(void MainWindow::LoadTheLibrary\(QString path\)) s
5 247 M
({) s
5 236 M
(    this->setCurrentLibraryPath\(path\);) s
5 214 M
(    // Reload the library from the file system) s
5 203 M
(    ManageLibrary library = currentUser.loadLibrary\(path\);) s
5 192 M
(    mainlibrary = library;) s
5 170 M
(    // qDebug\(\) << "Library Created";) s
5 148 M
(    // If the library is empty) s
5 137 M
(    if \(library.getHead\(\) == nullptr\)) s
5 126 M
(    {) s
5 115 M
(        // qDebug\(\) << "The library is empty";) s
5 104 M
(        clearGridLayout\(\);) s
5 93 M
(        // ui->emptyLibrary->setText\("The library is empty."\);) s
5 82 M
(        return;) s
5 71 M
(    }) s
5 49 M
(    // ui->emptyLibrary->setText\(""\);) s
5 38 M
(    double maxCost = mainlibrary.getMaxDescriptorCost\(\);) s
5 27 M
(    double minCost = mainlibrary.getMinDescriptorCost\(\);) s
5 5 M
(    // Clear the existing items in the grid layout) s
_R
S
%%Page: (4) 41
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (mainwindow.cpp) def
/fdir (.) def
/ftail (mainwindow.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:43 2025) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(    clearGridLayout\(\);) s
5 720 M
(    // V\303\251rification du chemin de l'image) s
5 709 M
(    QString imagePath = library.getLibraryPath\(\); // Utilise la m\303\251thode getLibraryPath pou) s
5 698 M
(r obtenir le chemin) s
5 687 M
(    if \(QFile::exists\(imagePath\)\) {) s
5 676 M
(        // qDebug\(\) << "Loading image: " << imagePath;) s
5 665 M
(        // Continue to load image here) s
5 654 M
(        populateGridLayout\(library.getHead\(\)\);) s
5 643 M
(    } else {) s
5 632 M
(        // Handle error if image cannot be loaded) s
5 621 M
(        // qDebug\(\) << "Error while loading the image: " << imagePath;) s
5 610 M
(        QMessageBox::warning\(this, "Image Error", "Unable to load the image. Please check t) s
5 599 M
(he file path."\);) s
5 588 M
(        // Optionally, clear grid layout or set a default state) s
5 577 M
(    }) s
5 566 M
(}) s
5 522 M
(void MainWindow::clearGridLayout\(\)) s
5 511 M
({) s
5 500 M
(    while \(QLayoutItem *item = gridLayout->takeAt\(0\)\)) s
5 489 M
(    {) s
5 478 M
(        if \(QWidget *widget = item->widget\(\)\)) s
5 467 M
(        {) s
5 456 M
(            widget->deleteLater\(\); // Ensure proper deletion of the widget) s
5 445 M
(        }) s
5 434 M
(        delete item; // Delete the layout item) s
5 423 M
(    }) s
5 412 M
(}) s
5 390 M
(void MainWindow::populateGridLayout\(Descriptor *head\)) s
5 379 M
({) s
5 368 M
(    int row = 0;) s
5 357 M
(    int col = 0;) s
5 346 M
(    Descriptor *current = head;) s
5 335 M
(    QString appPath = QCoreApplication::applicationDirPath\(\);) s
5 313 M
(    while \(current != nullptr\)) s
5 302 M
(    {) s
5 291 M
(        if\(current->getAccess\(\) == 'L' && !currentUser.access\){) s
5 280 M
(            current = current->getNextDescriptor\(\);) s
5 269 M
(            continue;) s
5 258 M
(        }) s
5 247 M
(        // Create a vertical layout for each cell) s
5 236 M
(        QVBoxLayout *cellLayout = new QVBoxLayout\(\);) s
5 225 M
(        cellLayout->setContentsMargins\(10, 10, 10, 10\);) s
5 214 M
(        cellLayout->setSpacing\(10\);) s
5 192 M
(        // Create and add the image label) s
5 181 M
(        QLabel *imageLabel = new QLabel\(\);) s
5 170 M
(        // qDebug\(\) << "Loading Image : " << appPath + current->getImage\(\).getPath\(\);) s
5 159 M
(        QPixmap pixmap\(appPath + current->getImage\(\).getPath\(\)\);) s
5 148 M
(        if \(pixmap.isNull\(\)\)) s
5 137 M
(        {) s
5 126 M
(            qWarning\(\) << "Failed to load image: " << current->getImage\(\).getPath\(\);) s
5 115 M
(        }) s
5 104 M
(        imageLabel->setPixmap\(pixmap.scaled\(210, 210, Qt::KeepAspectRatio\)\);) s
5 93 M
(        imageLabel->setStyleSheet\("border: 1px solid #ccc; padding: 5px;"\);) s
5 82 M
(        cellLayout->addWidget\(imageLabel\);) s
5 60 M
(        // // Create and add the information label) s
5 49 M
(        QLabel *infoLabel = new QLabel\(\);) s
5 38 M
(        QString infoText = QString\("ID: %1"\).arg\(current->getIdDescriptor\(\)\);) s
5 27 M
(        infoLabel->setText\(infoText\);) s
5 16 M
(        infoLabel->setStyleSheet\("background-color: #f9f9f9; padding: 10px; border-radius: ) s
5 5 M
(5px;"\);) s
_R
S
%%Page: (5) 42
%%BeginPageSetup
_S
18 36 translate
/pagenum 5 def
/fname (mainwindow.cpp) def
/fdir (.) def
/ftail (mainwindow.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:43 2025) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        infoLabel->setFixedSize\(240, 33\);) s
5 720 M
(        cellLayout->addWidget\(infoLabel\);) s
5 698 M
(        // Create an info button) s
5 687 M
(            QPushButton *infoButton = new QPushButton\("Show/Hide Info", this\);) s
5 676 M
(            infoButton->setStyleSheet\(  "QPushButton {") s
5 665 M
(                                            "background-color: rgb\(153, 193, 241\);") s
5 654 M
(                                            "color: white;") s
5 643 M
(                                            "border: none;") s
5 632 M
(                                            "border-radius: 5px;") s
5 621 M
(                                            "padding: 8px 12px;") s
5 610 M
(                                            "font-size: 14px;") s
5 599 M
(                                            "font-weight: bold;") s
5 588 M
(                                            "}") s
5 577 M
(                                            "QPushButton:hover {") s
5 566 M
(                                            "background-color: rgb\(123, 163, 211\);") s
5 555 M
(                                            "}") s
5 544 M
(                                            "QPushButton:pressed {") s
5 533 M
(                                            "background-color: #003f7f;") s
5 522 M
(                                            "padding-left: 12px;") s
5 511 M
(                                            "padding-top: 12px;") s
5 500 M
(                                            "}"\);) s
5 489 M
(            cellLayout->addWidget\(infoButton\);) s
5 467 M
(        // If the user has access, create a delete button) s
5 456 M
(        if \(getCurrentUser\(\).access\)) s
5 445 M
(        {) s
5 434 M
(            QPushButton *deleteButton = new QPushButton\("Delete", this\);) s
5 423 M
(            deleteButton->setStyleSheet\(  "QPushButton {") s
5 412 M
(                                            "background-color: rgb\(153, 193, 241\);") s
5 401 M
(                                            "color: white;") s
5 390 M
(                                            "border: none;") s
5 379 M
(                                            "border-radius: 5px;") s
5 368 M
(                                            "padding: 8px 12px;") s
5 357 M
(                                            "font-size: 14px;") s
5 346 M
(                                            "font-weight: bold;") s
5 335 M
(                                            "}") s
5 324 M
(                                            "QPushButton:hover {") s
5 313 M
(                                            "background-color: rgb\(123, 163, 211\);") s
5 302 M
(                                            "}") s
5 291 M
(                                            "QPushButton:pressed {") s
5 280 M
(                                            "background-color: #003f7f;") s
5 269 M
(                                            "padding-left: 12px;") s
5 258 M
(                                            "padding-top: 12px;") s
5 247 M
(                                            "}"\);) s
5 236 M
(            cellLayout->addWidget\(deleteButton\);) s
5 214 M
(            // Use a lambda to delete the descriptor) s
5 203 M
(            connect\(deleteButton, &QPushButton::clicked, this, [this, descriptor = current]) s
5 192 M
(\(\)) s
5 181 M
(                    {) s
5 170 M
(                        mainlibrary.deleteDescriptor\(descriptor\);) s
5 159 M
(                        ShowTheLibrary\(mainlibrary\); // Reload the library after deletion) s
5 148 M
(                    }\);) s
5 126 M
(            QPushButton *editButton = new QPushButton\("Edit", this\);) s
5 115 M
(            editButton->setStyleSheet\(  "QPushButton {") s
5 104 M
(                                            "background-color: rgb\(153, 193, 241\);") s
5 93 M
(                                            "color: white;") s
5 82 M
(                                            "border: none;") s
5 71 M
(                                            "border-radius: 5px;") s
5 60 M
(                                            "padding: 8px 12px;") s
5 49 M
(                                            "font-size: 14px;") s
5 38 M
(                                            "font-weight: bold;") s
5 27 M
(                                            "}") s
5 16 M
(                                            "QPushButton:hover {") s
5 5 M
(                                            "background-color: rgb\(123, 163, 211\);") s
_R
S
%%Page: (6) 43
%%BeginPageSetup
_S
18 36 translate
/pagenum 6 def
/fname (mainwindow.cpp) def
/fdir (.) def
/ftail (mainwindow.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:43 2025) def
/pagenumstr (6) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(                                            "}") s
5 731 M
(                                            "QPushButton:pressed {") s
5 720 M
(                                            "background-color: #003f7f;") s
5 709 M
(                                            "padding-left: 12px;") s
5 698 M
(                                            "padding-top: 12px;") s
5 687 M
(                                            "}"\);) s
5 676 M
(            cellLayout->addWidget\(editButton\);) s
5 654 M
(            // Connect the Edit button to display a QMessageBox) s
5 643 M
(            connect\(editButton, &QPushButton::clicked, this, [this, current]\(\)) s
5 632 M
(                {) s
5 610 M
(                    unsigned int originalId = current->getIdDescriptor\(\);) s
5 588 M
(                    QDialog dialog\(this\);) s
5 577 M
(                    dialog.setWindowTitle\("Edit Image Info"\);) s
5 566 M
(                    dialog.setModal\(true\);) s
5 544 M
(                    QLineEdit *idEdit = new QLineEdit\(QString::number\(current->getIdDescrip) s
5 533 M
(tor\(\)\), &dialog\);) s
5 522 M
(                    QLineEdit *titleEdit = new QLineEdit\(current->getTitle\(\), &dialog\);) s
5 511 M
(                    QLineEdit *sourceEdit = new QLineEdit\(current->getSource\(\), &dialog\);) s
5 500 M
(                    QLineEdit *costEdit = new QLineEdit\(QString::number\(current->getCost\(\)\)) s
5 489 M
(, &dialog\);) s
5 467 M
(                    QComboBox *accessCombo = new QComboBox\(&dialog\);) s
5 456 M
(                    accessCombo->addItem\("L"\);) s
5 445 M
(                    accessCombo->addItem\("O"\);) s
5 434 M
(                    accessCombo->setCurrentText\(QString\(current->getAccess\(\)\)\);) s
5 423 M
(                    // Cr\303\251er un layout pour organiser les champs) s
5 412 M
(                    QFormLayout *formLayout = new QFormLayout\(\);) s
5 401 M
(                    formLayout->addRow\("ID:", idEdit\);) s
5 390 M
(                    formLayout->addRow\("Title:", titleEdit\);) s
5 379 M
(                    formLayout->addRow\("Source:", sourceEdit\);) s
5 368 M
(                    formLayout->addRow\("Cost:", costEdit\);) s
5 357 M
(                    formLayout->addRow\("Access:", accessCombo\);) s
5 324 M
(                    // Ajouter les boutons) s
5 313 M
(                    QDialogButtonBox *buttonBox = new QDialogButtonBox\(QDialogButtonBox::Sa) s
5 302 M
(ve | QDialogButtonBox::Cancel, &dialog\);) s
5 280 M
(                    // Connecter les boutons) s
5 269 M
(                    connect\(buttonBox, &QDialogButtonBox::accepted, &dialog, &QDialog::acce) s
5 258 M
(pt\);) s
5 247 M
(                    connect\(buttonBox, &QDialogButtonBox::rejected, &dialog, &QDialog::reje) s
5 236 M
(ct\);) s
5 214 M
(                    // Organiser le tout dans un layout principal) s
5 203 M
(                    QVBoxLayout *mainLayout = new QVBoxLayout\(&dialog\);) s
5 192 M
(                    mainLayout->addLayout\(formLayout\);) s
5 181 M
(                    mainLayout->addWidget\(buttonBox\);) s
5 159 M
(                    // Afficher la bo\303\256te de dialogue) s
5 148 M
(                    if \(dialog.exec\(\) == QDialog::Accepted\) {) s
5 137 M
(                        // Mettre \303\240 jour les informations) s
5 126 M
(                        current->setIdDescriptor\(idEdit->text\(\).toInt\(\)\);                  ) s
5 115 M
(      ) s
5 104 M
(                        current->setTitle\(titleEdit->text\(\)\);) s
5 93 M
(                        current->setSource\(sourceEdit->text\(\)\);) s
5 82 M
(                        current->setCost\(costEdit->text\(\).toDouble\(\)\);) s
5 71 M
(                        current->setAccess\(accessCombo->currentText\(\).toStdString\(\)[0]\); //) s
5 60 M
( R\303\251cup\303\251rer la valeur s\303\251lectionn\303\251e) s
5 38 M
(                        SaveChanges_clicked\(current, originalId\);) s
5 16 M
(                        ShowTheLibrary\(mainlibrary\); // Rafra\303\256chir l'affichage ) s
5 5 M
(                    }) s
_R
S
%%Page: (7) 44
%%BeginPageSetup
_S
18 36 translate
/pagenum 7 def
/fname (mainwindow.cpp) def
/fdir (.) def
/ftail (mainwindow.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:43 2025) def
/pagenumstr (7) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(                }\);) s
5 731 M
(            } ) s
5 698 M
(                bool *isInfoVisible = new bool\(false\); // Initial state: info hidden) s
5 676 M
(                // Connect the info button) s
5 665 M
(                connect\(infoButton, &QPushButton::clicked, this, [infoLabel, current, isInf) s
5 654 M
(oVisible]\(\)) s
5 643 M
(                    {) s
5 632 M
(                        if \(*isInfoVisible\) {) s
5 621 M
(                        // Hide additional information) s
5 610 M
(                        infoLabel->setText\(QString\("ID: %1"\).arg\(current->getIdDescriptor\(\)) s
5 599 M
(\)\);) s
5 588 M
(                        infoLabel->setFixedSize\(240, 33\); // Revenir \303\240 la taille initiale) s
5 577 M
(                        *isInfoVisible = false;) s
5 555 M
(                        } else {) s
5 544 M
(                            // Show additional information) s
5 533 M
(                            QString additionalInfo = QString\("\\nCost: %1\\nTitle: %2\\nSource) s
5 522 M
(: %3\\nAccess: %4"\)) s
5 511 M
(                                             .arg\(current->getCost\(\)\)         // Cost) s
5 500 M
(                                             .arg\(current->getTitle\(\)\)        // Titre) s
5 489 M
(                                             .arg\(current->getSource\(\)\)       // Source) s
5 478 M
(                                             .arg\(current->getAccess\(\)\);        // Access) s
5 467 M
(                            infoLabel->setText\(infoLabel->text\(\) + additionalInfo\);) s
5 445 M
(                            infoLabel->setFixedSize\(QWIDGETSIZE_MAX, QWIDGETSIZE_MAX\);) s
5 434 M
(                            infoLabel->setSizePolicy\(QSizePolicy::Preferred, QSizePolicy::P) s
5 423 M
(referred\); // Autoriser l'expansion) s
5 412 M
(                            *isInfoVisible = true;) s
5 401 M
(            }) s
5 390 M
(        }\);) s
5 368 M
(        // Create a widget to hold the cell layout and add it to the grid layout) s
5 357 M
(        QWidget *cellWidget = new QWidget\(\);) s
5 346 M
(        cellWidget->setLayout\(cellLayout\);) s
5 335 M
(        cellWidget->setFixedSize\(250, 350\);) s
5 324 M
(        cellWidget->setStyleSheet\("background-color: #ffffff; border: 1px solid #ddd; borde) s
5 313 M
(r-radius: 10px; padding: 10px;"\);) s
5 302 M
(        gridLayout->addWidget\(cellWidget, row, col\);) s
5 280 M
(        // Store the connection between the widget and the descriptor) s
5 269 M
(        widgetDescriptorMap[cellWidget] = current;) s
5 247 M
(        // Install an event filter for the widget) s
5 236 M
(        cellWidget->installEventFilter\(this\);) s
5 214 M
(        // Update row and column for grid layout) s
5 203 M
(        col++;) s
5 192 M
(        if \(col >= 3\)) s
5 181 M
(        {) s
5 170 M
(            col = 0;) s
5 159 M
(            row++;) s
5 148 M
(        }) s
5 126 M
(        current = current->getNextDescriptor\(\);) s
5 115 M
(    }) s
5 104 M
(}) s
5 82 M
(void MainWindow::cleanUpDescriptors\(Descriptor *head\)) s
5 71 M
({) s
5 60 M
(    Descriptor *current = head;) s
5 49 M
(    while \(current != nullptr\)) s
5 38 M
(    {) s
5 27 M
(        Descriptor *temp = current;) s
5 16 M
(        current = current->getNextDescriptor\(\);) s
5 5 M
(        delete temp;) s
_R
S
%%Page: (8) 45
%%BeginPageSetup
_S
18 36 translate
/pagenum 8 def
/fname (mainwindow.cpp) def
/fdir (.) def
/ftail (mainwindow.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:43 2025) def
/pagenumstr (8) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(    }) s
5 731 M
(}) s
5 709 M
(void MainWindow::ShowTheLibrary\(ManageLibrary library\)) s
5 698 M
({) s
5 687 M
(    // qDebug\(\) << "To show the library";) s
5 665 M
(    // If the library is empty) s
5 654 M
(    if \(library.getHead\(\) == nullptr\)) s
5 643 M
(    {) s
5 632 M
(        // qDebug\(\) << "The library is empty";) s
5 621 M
(        clearGridLayout\(\);) s
5 610 M
(        QMessageBox::warning\(this, "Warning", "The library is empty."\);) s
5 599 M
(        return;) s
5 588 M
(    }) s
5 566 M
(    // Clear the existing items in the grid layout) s
5 555 M
(    clearGridLayout\(\);) s
5 533 M
(    // Populate the grid layout with images and their information) s
5 522 M
(    populateGridLayout\(library.getHead\(\)\);) s
5 511 M
(}) s
5 489 M
(User MainWindow::getCurrentUser\(\)) s
5 478 M
({) s
5 467 M
(    return this->currentUser;) s
5 456 M
(};) s
5 445 M
(bool MainWindow::eventFilter\(QObject *obj, QEvent *event\)) s
5 434 M
({) s
5 423 M
(    if \(event->type\(\) == QEvent::MouseButtonPress\)) s
5 412 M
(    {) s
5 401 M
(        QWidget *widget = qobject_cast<QWidget *>\(obj\);) s
5 390 M
(        if \(widget && widgetDescriptorMap.contains\(widget\)\)) s
5 379 M
(        {) s
5 368 M
(            Descriptor *descriptor = widgetDescriptorMap[widget];) s
5 357 M
(            // qDebug\(\) << "library Path in details" << this->currentLibraryPath;) s
5 346 M
(            descriptorDetails->setLibraryPath\(this->currentLibraryPath\);) s
5 335 M
(            descriptorDetails->setDescriptor\(descriptor\);) s
5 324 M
(            descriptorDetails->show\(\);) s
5 313 M
(            return true;) s
5 302 M
(        }) s
5 291 M
(    }) s
5 280 M
(    return QMainWindow::eventFilter\(obj, event\);) s
5 269 M
(}) s
5 247 M
(void MainWindow::refreshLibrary\(\)) s
5 236 M
({) s
5 225 M
(}) s
5 203 M
(void MainWindow::on_CreateNewLibrary_triggered\(\)) s
5 192 M
({) s
5 181 M
(    bool ok;) s
5 170 M
(    QString libraryName = QInputDialog::getText\(this, tr\("Create New Library"\),) s
5 159 M
(                                                tr\("Library Name:"\), QLineEdit::Normal, "",) s
5 148 M
( &ok\);) s
5 126 M
(    if \(ok && !libraryName.isEmpty\(\)\)) s
5 115 M
(    {) s
5 104 M
(        currentUser.createLibrary\(libraryName\);) s
5 82 M
(        // Block signals temporarily to avoid triggering `currentIndexChanged`) s
5 71 M
(        ui->comboBox_libraries->blockSignals\(true\);) s
5 49 M
(        ui->comboBox_libraries->clear\(\);) s
5 38 M
(        QString appPath = QCoreApplication::applicationDirPath\(\);) s
5 27 M
(        QString librariesFilePath = appPath + "/libraries.json";) s
5 16 M
(        QJsonArray jsonArray = currentUser.loadLibraries\(librariesFilePath\);) s
_R
S
%%Page: (9) 46
%%BeginPageSetup
_S
18 36 translate
/pagenum 9 def
/fname (mainwindow.cpp) def
/fdir (.) def
/ftail (mainwindow.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:43 2025) def
/pagenumstr (9) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        for \(const QJsonValue &value : jsonArray\)) s
5 731 M
(        {) s
5 720 M
(            QJsonObject libraryObj = value.toObject\(\);) s
5 709 M
(            QString libraryName = libraryObj["name"].toString\(\);) s
5 698 M
(            QString libraryPath = libraryObj["path"].toString\(\);) s
5 676 M
(            // Validate and log paths) s
5 665 M
(            QString fullPath = appPath + libraryPath;) s
5 654 M
(            // qDebug\(\) << "Adding to combo box: " << libraryName << " -> " << fullPath;) s
5 632 M
(            ui->comboBox_libraries->addItem\(libraryName, fullPath\); // Store the absolute p) s
5 621 M
(ath) s
5 610 M
(        }) s
5 588 M
(        // Unblock signals after populating) s
5 577 M
(        ui->comboBox_libraries->blockSignals\(false\);) s
5 566 M
(    }) s
5 555 M
(    else) s
5 544 M
(    {) s
5 533 M
(        QMessageBox::warning\(this, tr\("Invalid Input"\), tr\("Library name cannot be empty."\)) s
5 522 M
(\);) s
5 511 M
(    }) s
5 500 M
(}) s
5 478 M
(void MainWindow::on_actionAdd_New_Descriptor_triggered\(\)) s
5 467 M
({) s
5 456 M
(    // qDebug\(\) << "In MainWindow::on_add_new_description_clicked\(\):";) s
5 445 M
(    // qDebug\(\) << "---------------------------------------";) s
5 434 M
(    // qDebug\(\) << MainWindow::getCurrentLibraryId\(\);) s
5 423 M
(    Add_New_Descriptor addDescriptorDialog\(mainlibrary.getLibraryPath\(\), this\);) s
5 412 M
(    addDescriptorDialog.exec\(\);) s
5 401 M
(    // refresh the ui to show the new descriptor) s
5 390 M
(    LoadTheLibrary\(mainlibrary.getLibraryPath\(\)\);) s
5 379 M
(}) s
5 357 M
(void MainWindow::on_actionDelete_a_library_triggered\(\)) s
5 346 M
({) s
5 335 M
(    // Load the libraries from the JSON file) s
5 324 M
(    QString appPath = QCoreApplication::applicationDirPath\(\);) s
5 302 M
(    QString librariesFilePath = appPath + "/libraries.json";) s
5 291 M
(    QJsonArray jsonArray = currentUser.loadLibraries\(librariesFilePath\);) s
5 269 M
(    // Prepare a list of library names) s
5 258 M
(    QStringList libraryNames;) s
5 247 M
(    QMap<QString, QString> libraryPaths; // Map to store library names and their paths) s
5 225 M
(    for \(const QJsonValue &value : jsonArray\)) s
5 214 M
(    {) s
5 203 M
(        QJsonObject libraryObj = value.toObject\(\);) s
5 192 M
(        QString libraryName = libraryObj["name"].toString\(\);) s
5 181 M
(        QString libraryPath = libraryObj["path"].toString\(\);) s
5 170 M
(        libraryNames.append\(libraryName\);        // Add library name to the list) s
5 159 M
(        libraryPaths[libraryName] = libraryPath; // Store the corresponding library path) s
5 148 M
(    }) s
5 126 M
(    // Show a dialog to let the user choose which library to delete) s
5 115 M
(    bool ok;) s
5 104 M
(    QString libraryNameToDelete = QInputDialog::getItem\(this, tr\("Delete a Library"\),) s
5 93 M
(                                                        tr\("Select Library to Delete:"\),) s
5 82 M
(                                                        libraryNames, 0, false, &ok\);) s
5 60 M
(    // If the user selected a library and clicked OK) s
5 49 M
(    if \(ok && !libraryNameToDelete.isEmpty\(\)\)) s
5 38 M
(    {) s
5 27 M
(        // Get the path of the selected library) s
5 16 M
(        QString libraryPath = libraryPaths[libraryNameToDelete];) s
_R
S
%%Page: (10) 47
%%BeginPageSetup
_S
18 36 translate
/pagenum 10 def
/fname (mainwindow.cpp) def
/fdir (.) def
/ftail (mainwindow.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:43 2025) def
/pagenumstr (10) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        // Call deleteLibrary to delete the library) s
5 731 M
(        currentUser.deleteLibrary\(libraryNameToDelete\);) s
5 709 M
(        // Refresh the UI after deletion) s
5 698 M
(        // qDebug\(\) << "The library has been deleted:" << libraryNameToDelete;) s
5 687 M
(        loadLibrariesButtons\(\); // Reload the buttons) s
5 665 M
(        // Optionally, refresh or reload other parts of the UI) s
5 654 M
(        // refreshLibrary\(\); // Uncomment if needed) s
5 643 M
(    }) s
5 632 M
(    else) s
5 621 M
(    {) s
5 610 M
(        // qDebug\(\) << "No library was selected for deletion.";) s
5 599 M
(    }) s
5 588 M
(}) s
5 566 M
(void MainWindow::on_SearchButton_clicked\(\)) s
5 555 M
({) s
5 544 M
(    QString ImageId = ui->ImageIdSearchInput->text\(\);) s
5 533 M
(    bool imageFound = false;) s
5 522 M
(    Descriptor *current = mainlibrary.getHead\(\);) s
5 511 M
(    QString appPath = QCoreApplication::applicationDirPath\(\);) s
5 489 M
(    while \(current != nullptr\)) s
5 478 M
(    {) s
5 467 M
(        if\(current->getAccess\(\) == 'L' && !currentUser.access\){) s
5 456 M
(            current = current->getNextDescriptor\(\);) s
5 445 M
(            continue;) s
5 434 M
(        }) s
5 412 M
(        // check if the current descriptor id is equal to the id entered by the user) s
5 401 M
(        if \(current->getIdDescriptor\(\) == ImageId.toInt\(\)\)) s
5 390 M
(        {) s
5 379 M
(            imageFound = true;) s
5 357 M
(            // Show the return button) s
5 346 M
(            ui->returnButton->setVisible\(true\);) s
5 335 M
(            // clear the grid layout) s
5 324 M
(            QLayoutItem *item;) s
5 313 M
(            while \(\(item = gridLayout->takeAt\(0\)\) != nullptr\)) s
5 302 M
(            {) s
5 291 M
(                delete item->widget\(\);) s
5 280 M
(                delete item;) s
5 269 M
(            }) s
5 247 M
(            // Create a vertical layout for each cell) s
5 236 M
(            QVBoxLayout *cellLayout = new QVBoxLayout\(\);) s
5 225 M
(            cellLayout->setContentsMargins\(10, 10, 10, 10\);) s
5 214 M
(            cellLayout->setSpacing\(10\);) s
5 192 M
(            // Create and add the image label) s
5 181 M
(            QLabel *imageLabel = new QLabel\(\);) s
5 170 M
(            QPixmap pixmap\(appPath + current->getImage\(\).getPath\(\)\);) s
5 159 M
(            imageLabel->setPixmap\(pixmap.scaled\(210, 210, Qt::KeepAspectRatio\)\); // Adjust ) s
5 148 M
(the size as needed) s
5 137 M
(            imageLabel->setStyleSheet\("border: 1px solid #ccc; padding: 5px;"\);) s
5 126 M
(            cellLayout->addWidget\(imageLabel\);) s
5 104 M
(            // // Create and add the information label) s
5 93 M
(            QLabel *infoLabel = new QLabel\(\);) s
5 82 M
(            QString infoText = QString\("ID: %1"\).arg\(current->getIdDescriptor\(\)\);) s
5 71 M
(            infoLabel->setText\(infoText\);) s
5 60 M
(            infoLabel->setStyleSheet\("background-color: #f9f9f9; padding: 10px; border-radi) s
5 49 M
(us: 5px;"\);) s
5 38 M
(            infoLabel->setFixedSize\(240, 33\);) s
5 27 M
(            cellLayout->addWidget\(infoLabel\);) s
5 5 M
(            // Create an info button) s
_R
S
%%Page: (11) 48
%%BeginPageSetup
_S
18 36 translate
/pagenum 11 def
/fname (mainwindow.cpp) def
/fdir (.) def
/ftail (mainwindow.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:43 2025) def
/pagenumstr (11) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(            QPushButton *infoButton = new QPushButton\("Show/Hide Info", this\);) s
5 731 M
(            infoButton->setStyleSheet\(  "QPushButton {") s
5 720 M
(                                            "background-color: rgb\(153, 193, 241\);") s
5 709 M
(                                            "color: white;") s
5 698 M
(                                            "border: none;") s
5 687 M
(                                            "border-radius: 5px;") s
5 676 M
(                                            "padding: 8px 12px;") s
5 665 M
(                                            "font-size: 14px;") s
5 654 M
(                                            "font-weight: bold;") s
5 643 M
(                                            "}") s
5 632 M
(                                            "QPushButton:hover {") s
5 621 M
(                                            "background-color: rgb\(123, 163, 211\);") s
5 610 M
(                                            "}") s
5 599 M
(                                            "QPushButton:pressed {") s
5 588 M
(                                            "background-color: #003f7f;") s
5 577 M
(                                            "padding-left: 12px;") s
5 566 M
(                                            "padding-top: 12px;") s
5 555 M
(                                            "}"\);) s
5 544 M
(            cellLayout->addWidget\(infoButton\);) s
5 522 M
(            if \(getCurrentUser\(\).access\)) s
5 511 M
(            {) s
5 500 M
(                QPushButton *deleteButton = new QPushButton\("Delete", this\);) s
5 489 M
(                deleteButton->setStyleSheet\(  "QPushButton {") s
5 478 M
(                                            "background-color: rgb\(153, 193, 241\);") s
5 467 M
(                                            "color: white;") s
5 456 M
(                                            "border: none;") s
5 445 M
(                                            "border-radius: 5px;") s
5 434 M
(                                            "padding: 8px 12px;") s
5 423 M
(                                            "font-size: 14px;") s
5 412 M
(                                            "font-weight: bold;") s
5 401 M
(                                            "}") s
5 390 M
(                                            "QPushButton:hover {") s
5 379 M
(                                            "background-color: rgb\(123, 163, 211\);") s
5 368 M
(                                            "}") s
5 357 M
(                                            "QPushButton:pressed {") s
5 346 M
(                                            "background-color: #003f7f;") s
5 335 M
(                                            "padding-left: 12px;") s
5 324 M
(                                            "padding-top: 12px;") s
5 313 M
(                                            "}"\);) s
5 302 M
(                cellLayout->addWidget\(deleteButton\);) s
5 280 M
(                // Use a lambda to delete the descriptor) s
5 269 M
(                connect\(deleteButton, &QPushButton::clicked, this, [this, descriptor = curr) s
5 258 M
(ent]\(\)) s
5 247 M
(                    {) s
5 236 M
(                        mainlibrary.deleteDescriptor\(descriptor\);) s
5 225 M
(                        ShowTheLibrary\(mainlibrary\); // Reload the library after deletion) s
5 214 M
(                    }\);) s
5 203 M
(                QPushButton *editButton = new QPushButton\("Edit", this\);) s
5 192 M
(                editButton->setStyleSheet\(  "QPushButton {") s
5 181 M
(                                            "background-color: rgb\(153, 193, 241\);") s
5 170 M
(                                            "color: white;") s
5 159 M
(                                            "border: none;") s
5 148 M
(                                            "border-radius: 5px;") s
5 137 M
(                                            "padding: 8px 12px;") s
5 126 M
(                                            "font-size: 14px;") s
5 115 M
(                                            "font-weight: bold;") s
5 104 M
(                                            "}") s
5 93 M
(                                            "QPushButton:hover {") s
5 82 M
(                                            "background-color: rgb\(123, 163, 211\);") s
5 71 M
(                                            "}") s
5 60 M
(                                            "QPushButton:pressed {") s
5 49 M
(                                            "background-color: #003f7f;") s
5 38 M
(                                            "padding-left: 12px;") s
5 27 M
(                                            "padding-top: 12px;") s
5 16 M
(                                            "}"\);) s
5 5 M
(            cellLayout->addWidget\(editButton\);) s
_R
S
%%Page: (12) 49
%%BeginPageSetup
_S
18 36 translate
/pagenum 12 def
/fname (mainwindow.cpp) def
/fdir (.) def
/ftail (mainwindow.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:43 2025) def
/pagenumstr (12) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(            connect\(editButton, &QPushButton::clicked, this, [this, current]\(\)) s
5 720 M
(                {) s
5 698 M
(                    unsigned int originalId = current->getIdDescriptor\(\);) s
5 676 M
(                    QDialog dialog\(this\);) s
5 665 M
(                    dialog.setWindowTitle\("Edit Image Info"\);) s
5 654 M
(                    dialog.setModal\(true\);) s
5 632 M
(                    QLineEdit *idEdit = new QLineEdit\(QString::number\(current->getIdDescrip) s
5 621 M
(tor\(\)\), &dialog\);) s
5 610 M
(                    QLineEdit *titleEdit = new QLineEdit\(current->getTitle\(\), &dialog\);) s
5 599 M
(                    QLineEdit *sourceEdit = new QLineEdit\(current->getSource\(\), &dialog\);) s
5 588 M
(                    QLineEdit *costEdit = new QLineEdit\(QString::number\(current->getCost\(\)\)) s
5 577 M
(, &dialog\);) s
5 555 M
(                    QComboBox *accessCombo = new QComboBox\(&dialog\);) s
5 544 M
(                    accessCombo->addItem\("L"\);) s
5 533 M
(                    accessCombo->addItem\("O"\);) s
5 522 M
(                    accessCombo->setCurrentText\(QString\(current->getAccess\(\)\)\);) s
5 511 M
(                    // Cr\303\251er un layout pour organiser les champs) s
5 500 M
(                    QFormLayout *formLayout = new QFormLayout\(\);) s
5 489 M
(                    formLayout->addRow\("ID:", idEdit\);) s
5 478 M
(                    formLayout->addRow\("Title:", titleEdit\);) s
5 467 M
(                    formLayout->addRow\("Source:", sourceEdit\);) s
5 456 M
(                    formLayout->addRow\("Cost:", costEdit\);) s
5 445 M
(                    formLayout->addRow\("Access:", accessCombo\);) s
5 412 M
(                    // Ajouter les boutons) s
5 401 M
(                    QDialogButtonBox *buttonBox = new QDialogButtonBox\(QDialogButtonBox::Sa) s
5 390 M
(ve | QDialogButtonBox::Cancel, &dialog\);) s
5 368 M
(                    // Connecter les boutons) s
5 357 M
(                    connect\(buttonBox, &QDialogButtonBox::accepted, &dialog, &QDialog::acce) s
5 346 M
(pt\);) s
5 335 M
(                    connect\(buttonBox, &QDialogButtonBox::rejected, &dialog, &QDialog::reje) s
5 324 M
(ct\);) s
5 302 M
(                    // Organiser le tout dans un layout principal) s
5 291 M
(                    QVBoxLayout *mainLayout = new QVBoxLayout\(&dialog\);) s
5 280 M
(                    mainLayout->addLayout\(formLayout\);) s
5 269 M
(                    mainLayout->addWidget\(buttonBox\);) s
5 247 M
(                    // Afficher la bo\303\256te de dialogue) s
5 236 M
(                    if \(dialog.exec\(\) == QDialog::Accepted\) {) s
5 225 M
(                        // Mettre \303\240 jour les informations) s
5 214 M
(                        current->setIdDescriptor\(idEdit->text\(\).toInt\(\)\);                  ) s
5 203 M
(      ) s
5 192 M
(                        current->setTitle\(titleEdit->text\(\)\);) s
5 181 M
(                        current->setSource\(sourceEdit->text\(\)\);) s
5 170 M
(                        current->setCost\(costEdit->text\(\).toDouble\(\)\);) s
5 159 M
(                        current->setAccess\(accessCombo->currentText\(\).toStdString\(\)[0]\); //) s
5 148 M
( R\303\251cup\303\251rer la valeur s\303\251lectionn\303\251e) s
5 126 M
(                        SaveChanges_clicked\(current, originalId\);) s
5 104 M
(                        ShowTheLibrary\(mainlibrary\); // Rafra\303\256chir l'affichage ) s
5 93 M
(                    }) s
5 82 M
(                }\);) s
5 71 M
(            } ) s
5 49 M
(            bool *isInfoVisible = new bool\(false\); ) s
5 27 M
(                // Connect the info button) s
5 16 M
(                connect\(infoButton, &QPushButton::clicked, this, [infoLabel, current, isInf) s
5 5 M
(oVisible]\(\)) s
_R
S
%%Page: (13) 50
%%BeginPageSetup
_S
18 36 translate
/pagenum 13 def
/fname (mainwindow.cpp) def
/fdir (.) def
/ftail (mainwindow.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:43 2025) def
/pagenumstr (13) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(                    {) s
5 731 M
(                        if \(*isInfoVisible\) {) s
5 720 M
(                        // Hide additional information) s
5 709 M
(                        infoLabel->setText\(QString\("ID: %1"\).arg\(current->getIdDescriptor\(\)) s
5 698 M
(\)\);) s
5 687 M
(                        infoLabel->setFixedSize\(240, 33\); // Revenir \303\240 la taille initiale) s
5 676 M
(                        *isInfoVisible = false;) s
5 654 M
(                        } else {) s
5 643 M
(                            // Show additional information) s
5 632 M
(                            QString additionalInfo = QString\("\\nCost: %1\\nTitle: %2\\nSource) s
5 621 M
(: %3\\nAccess: %4"\)) s
5 610 M
(                                             .arg\(current->getCost\(\)\)         // Cost) s
5 599 M
(                                             .arg\(current->getTitle\(\)\)        // Titre) s
5 588 M
(                                             .arg\(current->getSource\(\)\)       // Source) s
5 577 M
(                                             .arg\(current->getAccess\(\)\);        // Access) s
5 566 M
(                            infoLabel->setText\(infoLabel->text\(\) + additionalInfo\);) s
5 544 M
(                            infoLabel->setFixedSize\(QWIDGETSIZE_MAX, QWIDGETSIZE_MAX\);) s
5 533 M
(                            infoLabel->setSizePolicy\(QSizePolicy::Preferred, QSizePolicy::P) s
5 522 M
(referred\); // Autoriser l'expansion) s
5 511 M
(                            *isInfoVisible = true;) s
5 500 M
(                    }) s
5 489 M
(        }\);) s
5 467 M
(            // Create a widget to hold the cell layout and add it to the grid layout) s
5 456 M
(            QWidget *cellWidget = new QWidget\(\);) s
5 445 M
(            cellWidget->setLayout\(cellLayout\);) s
5 434 M
(            cellWidget->setFixedSize\(250, 350\); // Set fixed size for each descriptor) s
5 423 M
(            cellWidget->setStyleSheet\("background-color: #ffffff; border: 1px solid #ddd; b) s
5 412 M
(order-radius: 10px; padding: 10px;"\);) s
5 401 M
(            gridLayout->addWidget\(cellWidget, 0, 0\);) s
5 379 M
(            // Store the connection between the widget and the descriptor) s
5 368 M
(            widgetDescriptorMap[cellWidget] = current;) s
5 346 M
(            // Connect the click event to the slot) s
5 335 M
(            cellWidget->installEventFilter\(this\);) s
5 324 M
(        }) s
5 313 M
(        current = current->getNextDescriptor\(\);) s
5 302 M
(    }) s
5 280 M
(    if \(!imageFound\)) s
5 269 M
(    {) s
5 258 M
(        QMessageBox::warning\(this, "Error", "No image found with this ID."\);) s
5 247 M
(    }) s
5 236 M
(}) s
5 225 M
(void MainWindow::on_returnButton_clicked\(\)) s
5 214 M
({) s
5 203 M
(    ShowTheLibrary\(mainlibrary\);) s
5 192 M
(    // Show the return button) s
5 181 M
(    ui->returnButton->setVisible\(false\);) s
5 170 M
(}) s
5 126 M
(void MainWindow::on_DescendingButton_clicked\(\)) s
5 115 M
({) s
5 104 M
(    // order the descriptors by cost in descending order) s
5 93 M
(    ManageLibrary orderedLibrary = mainlibrary.orderDescriptorsByCostDescending\(\);) s
5 82 M
(    mainlibrary = orderedLibrary;) s
5 71 M
(    // refresh the library) s
5 60 M
(    ShowTheLibrary\(mainlibrary\);) s
5 49 M
(}) s
5 27 M
(void MainWindow::on_AscendingButton_clicked\(\)) s
5 16 M
({) s
5 5 M
(    ManageLibrary orderedLibrary = mainlibrary.orderDescriptorsByCostAscending\(\);) s
_R
S
%%Page: (14) 51
%%BeginPageSetup
_S
18 36 translate
/pagenum 14 def
/fname (mainwindow.cpp) def
/fdir (.) def
/ftail (mainwindow.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:43 2025) def
/pagenumstr (14) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(    mainlibrary = orderedLibrary;) s
5 731 M
(    // refresh the library) s
5 720 M
(    ShowTheLibrary\(mainlibrary\);) s
5 709 M
(}) s
5 687 M
(void MainWindow::on_saveSubListButton_clicked\(\)) s
5 676 M
({) s
5 665 M
(    // show a box to enter the name of the library) s
5 654 M
(    bool ok;) s
5 643 M
(    QString libraryName = QInputDialog::getText\(this, tr\("Save Sublibrary"\),) s
5 632 M
(                                                tr\("Sublibrary Name:"\), QLineEdit::Normal, ) s
5 621 M
("", &ok\);) s
5 599 M
(    // Save the sublibrary to a JSON file) s
5 577 M
(    sublibrary.saveLibraryToJson\(libraryName\);) s
5 566 M
(    // save the library name and path in libraries.json file) s
5 555 M
(    QString appPath = QCoreApplication::applicationDirPath\(\);) s
5 544 M
(    QString librariesFilePath = appPath + "/libraries.json";) s
5 522 M
(    QJsonObject library;) s
5 511 M
(    library["name"] = libraryName;) s
5 500 M
(    library["path"] = "/Libraries/" + libraryName + ".json";) s
5 489 M
(    // add to the libraries.json file) s
5 478 M
(    QFile file\(librariesFilePath\);) s
5 456 M
(    if \(!file.open\(QIODevice::ReadOnly\)\)) s
5 445 M
(    {) s
5 434 M
(        QMessageBox::information\(this,"Error:"," Could not open file"\);) s
5 423 M
(    }) s
5 401 M
(    QByteArray data = file.readAll\(\);) s
5 390 M
(    // add library to data) s
5 379 M
(    QJsonDocument doc\(QJsonDocument::fromJson\(data\)\);) s
5 368 M
(    QJsonObject obj = doc.object\(\);) s
5 357 M
(    QJsonArray array = obj["libraries"].toArray\(\);) s
5 346 M
(    array.append\(library\);) s
5 335 M
(    obj["libraries"] = array;) s
5 324 M
(    file.close\(\);) s
5 313 M
(    // write the updated data to the file) s
5 302 M
(    if \(!file.open\(QIODevice::WriteOnly\)\)) s
5 291 M
(    {) s
5 280 M
(        // qDebug\(\) << "Error: Could not open file";) s
5 269 M
(        exit\(1\);) s
5 258 M
(    }) s
5 247 M
(    file.write\(QJsonDocument\(obj\).toJson\(\)\);) s
5 236 M
(    file.close\(\);) s
5 214 M
(    QMessageBox::information\(this, "Success", "Sublibrary saved successfully."\);) s
5 203 M
(    loadLibrariesButtons\(\);) s
5 192 M
(}) s
5 181 M
(void MainWindow::on_ClearFilterButton_clicked\(\)) s
5 170 M
({) s
5 159 M
(    // R\303\251initialiser les champs de saisie) s
5 148 M
(    ui->MaxInput->clear\(\);) s
5 137 M
(    ui->MinInput->clear\(\);) s
5 126 M
(    ui->MaxInput_Only->clear\(\);) s
5 115 M
(    ui->MinInput_Only->clear\(\);) s
5 104 M
(    ui->Gratuit_checkBox->setChecked\(false\); // D\303\251cocher la case "Gratuit") s
5 82 M
(    // R\303\251afficher la liste compl\303\250te) s
5 71 M
(    sublibrary.setHead\(mainlibrary.getHead\(\)\);) s
5 60 M
(    ShowTheLibrary\(sublibrary\);) s
5 38 M
(    // Cacher le bouton "Clear Filter" apr\303\250s r\303\251initialisation) s
5 27 M
(    ui->ClearFilterButton->setVisible\(false\);) s
5 16 M
(}) s
_R
S
%%Page: (15) 52
%%BeginPageSetup
_S
18 36 translate
/pagenum 15 def
/fname (mainwindow.cpp) def
/fdir (.) def
/ftail (mainwindow.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:43 2025) def
/pagenumstr (15) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(void MainWindow::on_SubListButton_MaxMin_clicked\(\)) s
5 731 M
({) s
5 720 M
(    if \(ui->MaxInput->text\(\).isEmpty\(\) || ui->MinInput->text\(\).isEmpty\(\)\)) s
5 709 M
(    {) s
5 698 M
(        QMessageBox::warning\(this, "Error", "Please enter valid values for the cost."\);) s
5 687 M
(        return;) s
5 676 M
(    }) s
5 654 M
(    double maxCost = ui->MaxInput->text\(\).toDouble\(\);) s
5 643 M
(    double minCost = ui->MinInput->text\(\).toDouble\(\);) s
5 621 M
(    if \(maxCost < minCost\)) s
5 610 M
(    {) s
5 599 M
(        QMessageBox::warning\(this, "Error", "The maximum cost must be greater than or equal) s
5 588 M
( to the minimum cost."\);) s
5 577 M
(        return;) s
5 566 M
(    }) s
5 544 M
(    Descriptor *newHead = mainlibrary.getDescriptorsBetweenMaxMinCost\(maxCost, minCost\);) s
5 533 M
(    sublibrary.setHead\(newHead\);) s
5 522 M
(    ShowTheLibrary\(sublibrary\);) s
5 511 M
(    ui->ClearFilterButton->setVisible\(true\);) s
5 489 M
(   ) s
5 478 M
(}) s
5 456 M
(void MainWindow::on_SubListButton_Max_clicked\(\)) s
5 445 M
({) s
5 434 M
(    if \(ui->MaxInput_Only->text\(\).isEmpty\(\)\)) s
5 423 M
(    {) s
5 412 M
(        QMessageBox::warning\(this, "Error", "Please enter a value for the maximum cost."\);) s
5 401 M
(        return;) s
5 390 M
(    }) s
5 368 M
(    double maxCost = ui->MaxInput_Only->text\(\).toDouble\(\);) s
5 346 M
(    if \(maxCost < 0\)) s
5 335 M
(    {) s
5 324 M
(        QMessageBox::warning\(this, "Error", "The maximum cost must be positive."\);) s
5 313 M
(        return;) s
5 302 M
(    }) s
5 280 M
(    Descriptor *newHead = mainlibrary.getDescriptorsBetweenMaxMinCost\(maxCost, 0\);) s
5 269 M
(    sublibrary.setHead\(newHead\);) s
5 258 M
(    ShowTheLibrary\(sublibrary\);) s
5 247 M
(    ui->ClearFilterButton->setVisible\(true\);) s
5 225 M
(    ) s
5 214 M
(}) s
5 192 M
(void MainWindow::on_SubListButton_Min_clicked\(\)) s
5 181 M
({) s
5 170 M
(    if \(ui->MinInput_Only->text\(\).isEmpty\(\)\)) s
5 159 M
(    {) s
5 148 M
(        QMessageBox::warning\(this, "Error", "Please enter a value for the minimum cost."\);) s
5 137 M
(        return;) s
5 126 M
(    }) s
5 104 M
(    double minCost = ui->MinInput_Only->text\(\).toDouble\(\);) s
5 82 M
(    if \(minCost < 0\)) s
5 71 M
(    {) s
5 60 M
(        QMessageBox::warning\(this, "Error", "The minimum cost must be positive."\);) s
5 49 M
(        return;) s
5 38 M
(    }) s
5 16 M
(    Descriptor *newHead = mainlibrary.getDescriptorsBetweenMaxMinCost\(INFINITY, minCost\);) s
5 5 M
(    sublibrary.setHead\(newHead\);) s
_R
S
%%Page: (16) 53
%%BeginPageSetup
_S
18 36 translate
/pagenum 16 def
/fname (mainwindow.cpp) def
/fdir (.) def
/ftail (mainwindow.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:43 2025) def
/pagenumstr (16) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(    ShowTheLibrary\(sublibrary\);) s
5 731 M
(    ui->ClearFilterButton->setVisible\(true\);) s
5 709 M
(    ) s
5 698 M
(}) s
5 676 M
(void MainWindow::on_SubListButton_Gratuit_clicked\(\)) s
5 665 M
({) s
5 654 M
(    bool gratuit = ui->Gratuit_checkBox->isChecked\(\);) s
5 632 M
(    Descriptor *newHead = nullptr;) s
5 610 M
(    if \(gratuit\)) s
5 599 M
(    {) s
5 588 M
(        // Si la case est coch\303\251e, on filtre uniquement les \303\251l\303\251ments gratuits \(cost = 0\)) s
5 577 M
(        newHead = mainlibrary.getDescriptorsBetweenMaxMinCost\(0, 0\);) s
5 566 M
(    }) s
5 555 M
(    else) s
5 544 M
(    {) s
5 533 M
(        // Si la case est d\303\251coch\303\251e, on filtre pour NE PAS afficher les gratuits \(cost > 0) s
5 522 M
(\)) s
5 511 M
(        newHead = mainlibrary.getDescriptorsBetweenMaxMinCost\(INFINITY, 0.01\);) s
5 500 M
(    }) s
5 478 M
(    sublibrary.setHead\(newHead\);) s
5 467 M
(    ShowTheLibrary\(sublibrary\);) s
5 456 M
(    ui->ClearFilterButton->setVisible\(true\);) s
5 445 M
(}) s
5 423 M
(void MainWindow::on_LogoutButton_clicked\(\)) s
5 412 M
({) s
5 401 M
(    emit logoutRequested\(\);) s
5 379 M
(}) s
5 357 M
(void MainWindow::SaveChanges_clicked\(Descriptor *currentDescriptor, unsigned int originalId) s
5 346 M
(\)) s
5 335 M
({) s
5 324 M
(    QString libraryPath = this->currentLibraryPath;) s
5 302 M
(    // R\303\251cup\303\251rer les nouvelles informations) s
5 291 M
(    QJsonObject curObj = currentDescriptor->toJson\(\);) s
5 269 M
(    // Charger la biblioth\303\250que) s
5 258 M
(    QFile file\(libraryPath\);) s
5 247 M
(    if \(!file.open\(QIODevice::ReadOnly\)\) {) s
5 236 M
(        // qDebug\(\) << "Error: Could not open file";) s
5 225 M
(        return;) s
5 214 M
(    }) s
5 192 M
(    // Lire le fichier JSON existant) s
5 181 M
(    QByteArray data = file.readAll\(\);) s
5 170 M
(    file.close\(\);) s
5 159 M
(    QJsonDocument doc\(QJsonDocument::fromJson\(data\)\);) s
5 148 M
(    QJsonObject obj = doc.object\(\);) s
5 137 M
(    QJsonArray array = obj["library"].toArray\(\);) s
5 126 M
(    QJsonArray newArray;) s
5 104 M
(    for \(int i = 0; i < array.size\(\); i++\) {) s
5 93 M
(        QJsonObject obj = array[i].toObject\(\);) s
5 71 M
(        // V\303\251rifier si l'ID correspond \303\240 l'ID d'origine) s
5 60 M
(        if \(obj["id"].toInt\(\) == \(int\)originalId\) {) s
5 49 M
(            newArray.append\(curObj\); // Remplacer l'entr\303\251e) s
5 38 M
(        } else {) s
5 27 M
(            newArray.append\(obj\); // Garder les autres entr\303\251es inchang\303\251es) s
5 16 M
(        }) s
5 5 M
(    }) s
_R
S
%%Page: (17) 54
%%BeginPageSetup
_S
18 36 translate
/pagenum 17 def
/fname (mainwindow.cpp) def
/fdir (.) def
/ftail (mainwindow.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:43 2025) def
/pagenumstr (17) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(    obj["library"] = newArray;) s
5 709 M
(    // Sauvegarder les modifications) s
5 698 M
(    if \(!file.open\(QIODevice::WriteOnly\)\) {) s
5 687 M
(        // qDebug\(\) << "Error: Could not open file";) s
5 676 M
(        return;) s
5 665 M
(    }) s
5 654 M
(    file.write\(QJsonDocument\(obj\).toJson\(\)\);) s
5 643 M
(    file.close\(\);) s
5 621 M
(    // qDebug\(\) << "Changes saved to the library file for ID:" << originalId;) s
5 610 M
(}) s
_R
S
%%Page: (1) 55
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (user.cpp) def
/fdir (.) def
/ftail (user.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:42 2025) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(#include "user.hpp") s
5 731 M
(#include "librarymanagement.hpp") s
5 720 M
(#include <QString>) s
5 709 M
(#include <QJsonDocument>) s
5 698 M
(#include <QJsonObject>) s
5 687 M
(#include <QJsonArray>) s
5 676 M
(#include <QFile>) s
5 665 M
(#include <QIODevice>) s
5 654 M
(#include <QDebug>) s
5 643 M
(#include <QPushButton>) s
5 632 M
(#include <QCoreApplication>) s
5 610 M
(User::User\(bool access\):access\(access\) {}) s
5 588 M
(ManageLibrary User::loadLibrary\(const QString& path\) const {) s
5 577 M
(    // Load the file that contains the information of the library and create the ManageLibr) s
5 566 M
(ary object) s
5 555 M
(    // and display the library) s
5 544 M
(    QFile file\(path\);) s
5 533 M
(    if \(!file.open\(QIODevice::ReadOnly\)\) {) s
5 522 M
(        qDebug\(\) << "Error: Could not open file";) s
5 511 M
(        exit\(1\);) s
5 500 M
(    }) s
5 489 M
(    qDebug\(\) << "In load library : " << path;) s
5 467 M
(    QByteArray data = file.readAll\(\);) s
5 456 M
(    QJsonDocument doc\(QJsonDocument::fromJson\(data\)\);) s
5 445 M
(    QJsonObject obj = doc.object\(\);) s
5 434 M
(    QJsonArray array = obj["library"].toArray\(\);) s
5 412 M
(    if \(array.isEmpty\(\)\) {) s
5 401 M
(        qDebug\(\) << "The library is empty.";) s
5 390 M
(        file.close\(\);) s
5 379 M
(        ManageLibrary library\(1, nullptr,path\);) s
5 357 M
(        return library; // Return an empty ManageLibrary object) s
5 346 M
(    }) s
5 335 M
(    ) s
5 313 M
(    Descriptor* head = nullptr;) s
5 302 M
(    Descriptor* current = nullptr;) s
5 280 M
(    for \(int i = 0; i < array.size\(\); i++\) {) s
5 269 M
(        QJsonObject obj = array[i].toObject\(\);) s
5 258 M
(        qDebug\(\) << "ID: " << obj["id"].toInt\(\);) s
5 247 M
(        // qDebug\(\) << "Library ID: " << obj["libraryID"].toInt\(\);) s
5 236 M
(        qDebug\(\) << "Cost: " << obj["cost"].toDouble\(\);) s
5 225 M
(        qDebug\(\) << "Title: " << obj["title"].toString\(\);) s
5 214 M
(        qDebug\(\) << "Source: " << obj["source"].toString\(\);) s
5 203 M
(        qDebug\(\) << "Access: " << obj["access"].toString\(\);) s
5 192 M
(        qDebug\(\) << "Imagepath: " << obj["Imagepath"].toString\(\);) s
5 181 M
(        ) s
5 159 M
(        Descriptor* newDescriptor = new Descriptor\() s
5 148 M
(            obj["id"].toInt\(\),) s
5 137 M
(            obj["cost"].toDouble\(\),) s
5 126 M
(            obj["title"].toString\(\),) s
5 115 M
(            obj["source"].toString\(\),) s
5 104 M
(            obj["access"].toString\(\).toStdString\(\).c_str\(\)[0],) s
5 93 M
(            Image\(obj["Imagepath"].toString\(\)\)) s
5 82 M
(            \); ) s
5 71 M
(            if \(head == nullptr\) {) s
5 60 M
(            head = newDescriptor;) s
5 49 M
(            current = head;) s
5 38 M
(        } else {) s
5 27 M
(            current->setNextDescriptor\(newDescriptor\);) s
5 16 M
(            current = newDescriptor;) s
5 5 M
(        }) s
_R
S
%%Page: (2) 56
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (user.cpp) def
/fdir (.) def
/ftail (user.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:42 2025) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(    }) s
5 720 M
(    file.close\(\);) s
5 698 M
(    ManageLibrary library\(1, head,path\);) s
5 687 M
(    qDebug\(\) << "Displaying Library second time";) s
5 676 M
(    library.display\(\);) s
5 665 M
(    return library;) s
5 654 M
(}) s
5 599 M
(QJsonArray User::loadLibraries\(const QString& librariesFilePath\) {) s
5 588 M
(    qDebug\(\) << "in loadLibraries function";) s
5 577 M
(    // Load the file that contains the libraries path) s
5 566 M
(    qDebug\(\) << "Loading libraries from: " << librariesFilePath;) s
5 555 M
(    QFile file\(librariesFilePath\);) s
5 533 M
(    if \(!file.exists\(\)\) {) s
5 522 M
(        qDebug\(\) << "Error: File does not exist";) s
5 511 M
(        exit\(1\);) s
5 500 M
(    }) s
5 478 M
(    if \(!file.open\(QIODevice::ReadOnly\)\) {) s
5 467 M
(        qDebug\(\) << "Error: Could not open file";) s
5 456 M
(        qDebug\(\) << "Error details: " << file.errorString\(\);) s
5 445 M
(        exit\(1\);) s
5 434 M
(    }) s
5 412 M
(    QByteArray data = file.readAll\(\);) s
5 401 M
(    QJsonDocument doc\(QJsonDocument::fromJson\(data\)\);) s
5 390 M
(    QJsonObject obj = doc.object\(\);) s
5 379 M
(    QJsonArray array = obj["libraries"].toArray\(\);) s
5 357 M
(    return array;) s
5 346 M
(}) s
5 313 M
(// create a new library method) s
5 302 M
(void User::createLibrary\(QString libraryName\) {) s
5 291 M
(  // create a new library json file and save it in the libraries folder) s
5 280 M
(  // the file will contain an empty array) s
5 269 M
(    QString appPath = QCoreApplication::applicationDirPath\(\);) s
5 258 M
(    qDebug\(\) << "Creating library: " << libraryName;) s
5 247 M
(    qDebug\(\) << appPath;) s
5 225 M
(  QJsonObject library;) s
5 214 M
(  library["name"] = libraryName;) s
5 203 M
(  library["path"] = "/Libraries/" + libraryName + ".json";) s
5 181 M
(  //add to the libraries.json file) s
5 170 M
(  QFile file\(appPath + "/libraries.json"\);) s
5 148 M
(  if \(!file.open\(QIODevice::ReadOnly\)\) {) s
5 137 M
(      qDebug\(\) << "Error: Could not open file";) s
5 126 M
(      exit\(1\);) s
5 115 M
(  }) s
5 82 M
(  QByteArray data = file.readAll\(\);) s
5 71 M
(  // add library to data) s
5 60 M
(  QJsonDocument doc\(QJsonDocument::fromJson\(data\)\);) s
5 49 M
(  QJsonObject obj = doc.object\(\);) s
5 38 M
(  QJsonArray array = obj["libraries"].toArray\(\);) s
5 27 M
(  array.append\(library\);) s
5 16 M
(  obj["libraries"] = array;) s
5 5 M
(  file.close\(\);) s
_R
S
%%Page: (3) 57
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (user.cpp) def
/fdir (.) def
/ftail (user.cpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:26:42 2025) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(  // write the updated data to the file) s
5 731 M
(  if \(!file.open\(QIODevice::WriteOnly\)\) {) s
5 720 M
(      qDebug\(\) << "Error: Could not open file";) s
5 709 M
(      exit\(1\);) s
5 698 M
(  }) s
5 687 M
(  file.write\(QJsonDocument\(obj\).toJson\(\)\);) s
5 676 M
(  file.close\(\);) s
5 665 M
(  // create the library file) s
5 654 M
(  qDebug\(\) << "Creating the library file";) s
5 643 M
(  qDebug\(\) << appPath + library["path"].toString\(\);) s
5 621 M
(  QFile libraryFile\(appPath + library["path"].toString\(\)\);) s
5 610 M
(  if \(!libraryFile.open\(QIODevice::WriteOnly\)\) {) s
5 599 M
(      qDebug\(\) << "Error: Could not open file";) s
5 588 M
(      exit\(1\);) s
5 577 M
(  }) s
5 555 M
(  libraryFile.write\(QJsonDocument\(QJsonObject{{"library", QJsonArray\(\)}}\).toJson\(\)\);) s
5 544 M
(  libraryFile.close\(\);) s
5 511 M
(}) s
5 500 M
(// create the delete library method that delete the library file and the librray from the l) s
5 489 M
(ibraries.json file) s
5 478 M
(void User::deleteLibrary\(QString libraryToDelete\){) s
5 467 M
(    qDebug\(\) << "Deleting library: " << libraryToDelete;) s
5 456 M
(    QString appPath = QCoreApplication::applicationDirPath\(\);) s
5 434 M
(    QString libraryPath = appPath + "/Libraries/" + libraryToDelete + ".json";) s
5 423 M
(    // delete the file) s
5 412 M
(    qDebug\(\) << "Deleting the library file at : " << libraryPath;) s
5 401 M
(    QFile file\(libraryPath\);) s
5 390 M
(    if \(!file.open\(QIODevice::ReadOnly\)\) {) s
5 379 M
(        qDebug\(\) << "Error: Could not open file";) s
5 368 M
(        exit\(1\);) s
5 357 M
(    }) s
5 346 M
(    file.remove\(\);) s
5 335 M
(    file.close\(\);) s
5 324 M
(    // delete the name and path of the library from the libraries.json file) s
5 313 M
(    QFile librariesFile\(appPath + "/libraries.json"\);) s
5 302 M
(    if \(!librariesFile.open\(QIODevice::ReadOnly\)\) {) s
5 291 M
(        qDebug\(\) << "Error: Could not open file";) s
5 280 M
(        exit\(1\);) s
5 269 M
(    }) s
5 258 M
(    QByteArray data = librariesFile.readAll\(\);) s
5 247 M
(    QJsonDocument doc\(QJsonDocument::fromJson\(data\)\);) s
5 236 M
(    QJsonObject obj = doc.object\(\);) s
5 225 M
(    QJsonArray array = obj["libraries"].toArray\(\);) s
5 214 M
(    QJsonArray newArray;) s
5 203 M
(    for \(int i = 0; i < array.size\(\); i++\) {) s
5 192 M
(        QJsonObject libraryObj = array[i].toObject\(\);) s
5 181 M
(        if \(libraryObj["name"].toString\(\) != libraryToDelete\) {) s
5 170 M
(            newArray.append\(libraryObj\);) s
5 159 M
(        }) s
5 148 M
(    }) s
5 137 M
(    obj["libraries"] = newArray;) s
5 126 M
(    librariesFile.close\(\);) s
5 115 M
(    if \(!librariesFile.open\(QIODevice::WriteOnly\)\) {) s
5 104 M
(        qDebug\(\) << "Error: Could not open file";) s
5 93 M
(        exit\(1\);) s
5 82 M
(    }) s
5 71 M
(    librariesFile.write\(QJsonDocument\(obj\).toJson\(\)\);) s
5 60 M
(    librariesFile.close\(\);) s
5 38 M
(}) s
_R
S
%%Page: (1) 58
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (add_new_descriptor.hpp) def
/fdir (.) def
/ftail (add_new_descriptor.hpp) def
% User defined strings:
/fmodstr (Sat Jan 25 03:48:34 2025) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(#ifndef ADD_NEW_DESCRIPTOR_HPP) s
5 731 M
(#define ADD_NEW_DESCRIPTOR_HPP) s
5 709 M
(#include <QDialog>) s
5 687 M
(namespace Ui {) s
5 676 M
(class Add_New_Descriptor;) s
5 665 M
(}) s
5 643 M
(class Add_New_Descriptor : public QDialog) s
5 632 M
({) s
5 621 M
(    Q_OBJECT) s
5 599 M
(public:) s
5 588 M
(    explicit Add_New_Descriptor\(QString Librarypath,QWidget *parent = nullptr\);) s
5 577 M
(    ~Add_New_Descriptor\(\);) s
5 566 M
(    void setLibraryPath\(QString Librarypath\);) s
5 544 M
(private slots:) s
5 533 M
(    void on_loadImageButton_clicked\(\);) s
5 511 M
(    void on_save_the_descriptor_clicked\(\);) s
5 489 M
(private:) s
5 478 M
(    Ui::Add_New_Descriptor *ui;) s
5 467 M
(    QString Librarypath;) s
5 445 M
(};) s
5 423 M
(#endif // ADD_NEW_DESCRIPTOR_HPP) s
_R
S
%%Page: (1) 59
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (ClickableLabel.hpp) def
/fdir (.) def
/ftail (ClickableLabel.hpp) def
% User defined strings:
/fmodstr (Thu Jan 23 08:53:30 2025) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(#ifndef CLICKABLELABEL_HPP) s
5 731 M
(#define CLICKABLELABEL_HPP) s
5 709 M
(#include <QLabel>) s
5 698 M
(#include <QWidget>) s
5 687 M
(#include <QMouseEvent>) s
5 665 M
(class ClickableLabel : public QLabel {) s
5 654 M
(    Q_OBJECT) s
5 632 M
(public:) s
5 621 M
(    explicit ClickableLabel\(QWidget *parent = nullptr\) : QLabel\(parent\) {}) s
5 599 M
(signals:) s
5 588 M
(    void clicked\(\);) s
5 566 M
(protected:) s
5 555 M
(    void mousePressEvent\(QMouseEvent *event\) override {) s
5 544 M
(        QLabel::mousePressEvent\(event\);) s
5 533 M
(        emit clicked\(\);) s
5 522 M
(    }) s
5 511 M
(};) s
5 489 M
(#endif // CLICKABLELABEL_HPP) s
_R
S
%%Page: (1) 60
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (descriptordetails.hpp) def
/fdir (.) def
/ftail (descriptordetails.hpp) def
% User defined strings:
/fmodstr (Thu Jan 23 08:53:34 2025) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(#ifndef DESCRIPTORDETAILS_HPP) s
5 731 M
(#define DESCRIPTORDETAILS_HPP) s
5 709 M
(#include <QDialog>) s
5 698 M
(#include <QString>) s
5 687 M
(#include <QJsonArray>) s
5 676 M
(#include <QLabel>) s
5 654 M
(#include "descriptor.hpp") s
5 632 M
(namespace Ui {) s
5 621 M
(class DescriptorDetails;) s
5 610 M
(}) s
5 588 M
(class DescriptorDetails : public QDialog) s
5 577 M
({) s
5 566 M
(    Q_OBJECT) s
5 544 M
(public:) s
5 533 M
(    explicit DescriptorDetails\(QWidget *parent = nullptr , bool access = false,QString Libr) s
5 522 M
(aryPath = ""\);) s
5 511 M
(    ~DescriptorDetails\(\);) s
5 500 M
(    void setDescriptor\(Descriptor* descriptor\);) s
5 489 M
(    void setLibraryPath\(QString libraryPath\);) s
5 478 M
(    QString getLibraryPath\(\);) s
5 467 M
(    bool access;) s
5 445 M
(private slots:) s
5 434 M
(    void on_filtreButton_clicked\(\);) s
5 423 M
(    void onFilterSelectionChanged\(int index\);) s
5 412 M
(    void on_SaveChanges_clicked\(\);) s
5 401 M
(    void onLabelClicked\(QLabel *clickedLabel\); ) s
5 379 M
(private:) s
5 368 M
(    Ui::DescriptorDetails *ui;) s
5 357 M
(    Descriptor* currentDescriptor;) s
5 346 M
(    QString LibraryPath;) s
5 324 M
(};) s
5 302 M
(#endif // DESCRIPTORDETAILS_HPP) s
_R
S
%%Page: (1) 61
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (descriptor.hpp) def
/fdir (.) def
/ftail (descriptor.hpp) def
% User defined strings:
/fmodstr (Sat Jan 25 03:48:46 2025) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(#ifndef DESCRIPTOR_HPP) s
5 731 M
(#define DESCRIPTOR_HPP) s
5 720 M
(#include "image.hpp") s
5 709 M
(#include <QJsonObject>) s
5 687 M
(class Descriptor {) s
5 665 M
(private:) s
5 654 M
(    unsigned int idDes;) s
5 643 M
(    Descriptor* nextDescriptor;) s
5 632 M
(    double cost;) s
5 621 M
(    QString title;) s
5 610 M
(    QString source;) s
5 599 M
(    char access;) s
5 588 M
(    Image image;) s
5 566 M
(public:) s
5 555 M
(    Descriptor\(const Image& img\);) s
5 544 M
(    Descriptor\(int idDesc, const Image& img\);) s
5 533 M
(    Descriptor\(int idDesc, double costValue, const Image& img\);) s
5 522 M
(    Descriptor\(int idDesc, double costValue, const QString& descTitle, const Image& img\);) s
5 511 M
(    Descriptor\(int idDesc, double costValue, const QString& descTitle, const QString& descS) s
5 500 M
(ource, const Image& img\);) s
5 489 M
(    Descriptor\(int idDesc, double costValue, const QString& descTitle, const QString& descS) s
5 478 M
(ource, const char descAccess, const Image& img\);) s
5 456 M
(    unsigned int getIdDescriptor\(\) const;) s
5 445 M
(    double getCost\(\) const;) s
5 434 M
(    QString getTitle\(\) const;) s
5 423 M
(    QString getSource\(\) const;) s
5 412 M
(    char getAccess\(\) const;) s
5 401 M
(    Image getImage\(\) const;) s
5 390 M
(    Descriptor* getNextDescriptor\(\) const;) s
5 368 M
(    void setIdDescriptor\(int newIdDes\);) s
5 357 M
(    void setCost\(double newCost\);) s
5 346 M
(    void setTitle\(const QString& descTitle\);) s
5 335 M
(    void setSource\(const QString& descSource\);) s
5 324 M
(    void setAccess\(const char& descAccess\);) s
5 313 M
(    void setImage\(const Image& img\);) s
5 302 M
(    void setNextDescriptor\(Descriptor* nextDesc\);) s
5 280 M
(    void display\(\) const;) s
5 269 M
(    QPixmap cvMatToQPixmap\(const cv::Mat& mat\) const;) s
5 258 M
(    cv::Mat QPixmapToCvMat\(const QPixmap& pixmap\) const;) s
5 247 M
(    QJsonObject toJson\(\) const;) s
5 236 M
(};) s
5 214 M
(#endif) s
_R
S
%%Page: (1) 62
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (image.hpp) def
/fdir (.) def
/ftail (image.hpp) def
% User defined strings:
/fmodstr (Sat Jan 25 03:48:53 2025) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(#ifndef IMAGE_HPP) s
5 731 M
(#define IMAGE_HPP) s
5 709 M
(#include <opencv2/opencv.hpp>) s
5 698 M
(#include <QString>) s
5 687 M
(#include <QPixmap>) s
5 676 M
(class Image {) s
5 665 M
(public:) s
5 654 M
(    Image\(const QString& imgPath\);) s
5 632 M
(    void loadImage\(const QString& imgPath\);) s
5 621 M
(    double calculateCompressionRatio\(const QString& imgPath\) const;) s
5 610 M
(    void showImage\(const QString& imgPath\) const;) s
5 588 M
(    QString getFormat\(\) const;) s
5 577 M
(    QString getPath\(\) const;) s
5 566 M
(    double getCompressionRatio\(\) const;) s
5 555 M
(    int getId\(\) const;) s
5 533 M
(    void setPath\(const QString& newPath\);) s
5 522 M
(    void setId\(const int newID\);) s
5 511 M
(    cv::Mat getContent\(\) const;) s
5 500 M
(    QPixmap getPixmap\(\) const;) s
5 456 M
(private:) s
5 445 M
(    QString path;) s
5 434 M
(    QString format;) s
5 423 M
(    double compressionRatio;) s
5 412 M
(    int idImage;) s
5 401 M
(    cv::Mat content;) s
5 390 M
(};) s
5 368 M
(#endif // IMAGE_HPP) s
_R
S
%%Page: (1) 63
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (imageproccessing.hpp) def
/fdir (.) def
/ftail (imageproccessing.hpp) def
% User defined strings:
/fmodstr (Sat Jan 25 10:12:03 2025) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(#ifndef IMAGEPROCCESSING_HPP) s
5 731 M
(#define IMAGEPROCCESSING_HPP) s
5 720 M
(#include <opencv2/opencv.hpp>) s
5 698 M
(using namespace cv;) s
5 687 M
(using namespace std; ) s
5 665 M
(class ImageProccessing) s
5 654 M
({) s
5 643 M
(public:) s
5 632 M
(    ImageProccessing\(\);) s
5 610 M
(    Mat calculateHistogram\(const Mat& inputImage\);) s
5 599 M
(    Mat applyGaussianFilter\(const Mat& inputImage\);) s
5 588 M
(    Mat toGrayScale\(const cv::Mat& inputImage\) ;) s
5 577 M
(    Mat applyCustomMedianFilter\(const cv::Mat& inputImage, int kernelSize\);) s
5 566 M
(    Mat applyEdgeDetection\(const Mat& inputImage\);) s
5 555 M
(    Mat applyThreshold\(const Mat& inputImage, int thresholdValue\);) s
5 544 M
(    Mat rotateImage\(const Mat& inputImage, int angle\);) s
5 533 M
(    Mat applySIFT\(const Mat& inputImage\);) s
5 522 M
(    Mat applyErosion\(const Mat& inputImage, int kernelSize\) ;) s
5 511 M
(};) s
5 489 M
(#endif // IMAGEPROCCESSING_HPP) s
_R
S
%%Page: (1) 64
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (kernels.hpp) def
/fdir (.) def
/ftail (kernels.hpp) def
% User defined strings:
/fmodstr (Thu Jan 23 09:02:26 2025) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(#ifndef KERNELS_HPP) s
5 731 M
(#define KERNELS_HPP) s
5 709 M
(#include <vector>) s
5 698 M
(using namespace std;) s
5 676 M
(// Noyau Sobel pour le gradient X) s
5 665 M
(const vector<vector<float>> SOBEL_X = {) s
5 654 M
(    {-1, 0, 1},) s
5 643 M
(    {-2, 0, 2},) s
5 632 M
(    {-1, 0, 1}) s
5 621 M
(};) s
5 599 M
(// Noyau Sobel pour le gradient Y) s
5 588 M
(const vector<vector<float>> SOBEL_Y = {) s
5 577 M
(    {-1, -2, -1},) s
5 566 M
(    { 0,  0,  0},) s
5 555 M
(    { 1,  2,  1}) s
5 544 M
(};) s
5 522 M
(#endif // KERNELS_HPP) s
_R
S
%%Page: (1) 65
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (librarymanagement.hpp) def
/fdir (.) def
/ftail (librarymanagement.hpp) def
% User defined strings:
/fmodstr (Sat Jan 25 03:49:06 2025) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(#ifndef LIBRARYMANAGEMENT_HPP) s
5 731 M
(#define LIBRARYMANAGEMENT_HPP) s
5 709 M
(#include <QString>) s
5 698 M
(#include <math.h>) s
5 687 M
(#include "descriptor.hpp") s
5 665 M
(using namespace std;) s
5 632 M
(class ManageLibrary {) s
5 610 M
(private:) s
5 599 M
(    int acces;) s
5 588 M
(    Descriptor* head ;) s
5 577 M
(    QString libraryPath;) s
5 544 M
(public:) s
5 533 M
(    ManageLibrary\(int acces, Descriptor* head,QString libraryPath\);) s
5 511 M
(    Descriptor* getDescriptor\(unsigned int idDesc\) const ;) s
5 500 M
(    int getAcces\(\) const ;) s
5 478 M
(    void addDescriptor\(\)     const;) s
5 467 M
(    void deleteDescriptor\(\)  const;) s
5 456 M
(    Descriptor* searchDescriptor\(unsigned int id\)  const;) s
5 445 M
(    void sortDescriptors\(\)   const;) s
5 434 M
(    int totalDescriptors\(\)   const;) s
5 423 M
(    void dipslayAllimages\(\)  const;) s
5 412 M
(    void display\(\)           const;) s
5 401 M
(    double displayCost\(unsigned int id\)     const;) s
5 390 M
(    void createCostSubList\(\) const;) s
5 379 M
(    Descriptor* getHead\(\) const; ) s
5 368 M
(    void setHead\(Descriptor* head\);) s
5 357 M
(    void deleteDescriptor\(Descriptor* descriptorToDelete\);) s
5 346 M
(    double getMaxDescriptorCost\(\);) s
5 335 M
(    double getMinDescriptorCost\(\);) s
5 324 M
(    ManageLibrary orderDescriptorsByCostDescending\(\);) s
5 313 M
(    ManageLibrary orderDescriptorsByCostAscending\(\);) s
5 302 M
(    void insertDescriptorInOrder\(ManageLibrary& library, Descriptor* descriptor\);) s
5 291 M
(    void insertDescriptorInOrderAscending\(ManageLibrary& library, Descriptor* descriptor\);) s
5 269 M
(    Descriptor* getDescriptorsByMaxCost\(double maxCost\);) s
5 258 M
(    QString getLibraryPath\(\) const;) s
5 247 M
(    void setLibraryPath\(QString path\);) s
5 225 M
(    void deletDescriptorFromMemory\(Descriptor* descriptorToDelete\);) s
5 214 M
(    void saveLibraryToJson\(QString libraryName\);) s
5 192 M
(    Descriptor* getDescriptorsBetweenMaxMinCost\(double maxCost, double minCost\);) s
5 148 M
(};) s
5 126 M
(#endif) s
_R
S
%%Page: (1) 66
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (loginwindow.hpp) def
/fdir (.) def
/ftail (loginwindow.hpp) def
% User defined strings:
/fmodstr (Sat Jan 25 03:49:11 2025) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(#ifndef LOGINWINDOW_HPP) s
5 731 M
(#define LOGINWINDOW_HPP) s
5 709 M
(#include <QDialog>) s
5 698 M
(#include "user.hpp") s
5 676 M
(namespace Ui {) s
5 665 M
(class LoginWindow;) s
5 654 M
(}) s
5 632 M
(class LoginWindow : public QDialog) s
5 621 M
({) s
5 610 M
(    Q_OBJECT) s
5 588 M
(public:) s
5 577 M
(    explicit LoginWindow\(User &user, QWidget *parent = nullptr\);) s
5 566 M
(    ~LoginWindow\(\);) s
5 544 M
(private slots:) s
5 533 M
(    void on_LoginButton_clicked\(\);) s
5 522 M
(private:) s
5 511 M
(    Ui::LoginWindow *ui;) s
5 500 M
(    User &user; // Reference to the User object) s
5 467 M
(};) s
5 445 M
(#endif // LOGINWINDOW_HPP) s
_R
S
%%Page: (1) 67
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (user.hpp) def
/fdir (.) def
/ftail (user.hpp) def
% User defined strings:
/fmodstr (Sat Jan 25 03:49:25 2025) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(#ifndef USER_HPP) s
5 731 M
(#define USER_HPP) s
5 720 M
(#include <QString>) s
5 709 M
(#include "librarymanagement.hpp") s
5 698 M
(#include <QJsonArray>) s
5 676 M
(class User) s
5 665 M
({) s
5 654 M
(private:) s
5 621 M
(public:) s
5 610 M
(    bool access;) s
5 599 M
(    QString libraryPath;) s
5 588 M
(    User\(\) : access\(""\) {};) s
5 577 M
(    User\(bool access\);) s
5 566 M
(    ManageLibrary loadLibrary\(const QString& path\) const  ;) s
5 555 M
(    QJsonArray loadLibraries\(const QString& librariesFilePath\);) s
5 544 M
(    // create a new library method) s
5 533 M
(    void createLibrary\(QString libraryName\);) s
5 522 M
(    void deleteLibrary\(QString libraryToDelete\);) s
5 511 M
(};) s
5 489 M
(#endif // USER_HPP) s
_R
S
%%Trailer
%%Pages: 67
%%DocumentNeededResources: font Courier-Bold Courier 
%%EOF
